; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  PrintfLogo PROC
;;;248    */
;;;249    static void PrintfLogo(void)
000000  b510              PUSH     {r4,lr}
;;;250    {
;;;251    	printf("\r\n");
000002  a015              ADR      r0,|L1.88|
000004  f7fffffe          BL       __2printf
;;;252    	printf("*************************************************************\r\n");
000008  a014              ADR      r0,|L1.92|
00000a  f7fffffe          BL       __2printf
;;;253    	printf("* 例程名称   : %s\r\n", EXAMPLE_NAME);	/* 打印例程名称 */
00000e  a123              ADR      r1,|L1.156|
000010  a025              ADR      r0,|L1.168|
000012  f7fffffe          BL       __2printf
;;;254    	printf("* 例程版本   : %s\r\n", DEMO_VER);		/* 打印例程版本 */
000016  a129              ADR      r1,|L1.188|
000018  a029              ADR      r0,|L1.192|
00001a  f7fffffe          BL       __2printf
;;;255    	printf("* 发布日期   : %s\r\n", EXAMPLE_DATE);	/* 打印例程日期 */
00001e  a12d              ADR      r1,|L1.212|
000020  a02f              ADR      r0,|L1.224|
000022  f7fffffe          BL       __2printf
;;;256    
;;;257    	/* 打印ST固件库版本，这3个定义宏在stm32f10x.h文件中 */
;;;258    	printf("* 固件库版本 : V%d.%d.%d (STM32F4xx_StdPeriph_Driver)\r\n", __STM32F4XX_STDPERIPH_VERSION_MAIN,
000026  2300              MOVS     r3,#0
000028  2203              MOVS     r2,#3
00002a  2101              MOVS     r1,#1
00002c  a031              ADR      r0,|L1.244|
00002e  f7fffffe          BL       __2printf
;;;259    			__STM32F4XX_STDPERIPH_VERSION_SUB1,__STM32F4XX_STDPERIPH_VERSION_SUB2);
;;;260    	/*功能描述*/
;;;261    	printf("* 按“1”显示最近24小时数据\r\n");	
000032  a03e              ADR      r0,|L1.300|
000034  f7fffffe          BL       __2printf
;;;262    	printf("* 按“2”显示最近一周的数据\r\n");	
000038  a044              ADR      r0,|L1.332|
00003a  f7fffffe          BL       __2printf
;;;263    	printf("* 按“3”显示最近一个月数据\r\n");	
00003e  a04b              ADR      r0,|L1.364|
000040  f7fffffe          BL       __2printf
;;;264    	printf("* 按“4”显示最新采集的数据\r\n");
000044  a051              ADR      r0,|L1.396|
000046  f7fffffe          BL       __2printf
;;;265    	printf("* \n\r");	/* 打印一行空格 */
00004a  a058              ADR      r0,|L1.428|
00004c  f7fffffe          BL       __2printf
;;;266    	printf("*************************************************************\r\n");
000050  a002              ADR      r0,|L1.92|
000052  f7fffffe          BL       __2printf
;;;267    }
000056  bd10              POP      {r4,pc}
;;;268    
                          ENDP

                  |L1.88|
000058  0d0a00            DCB      "\r\n",0
00005b  00                DCB      0
                  |L1.92|
00005c  2a2a2a2a          DCB      "*******************************************************"
000060  2a2a2a2a
000064  2a2a2a2a
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a2a2a2a
000088  2a2a2a2a
00008c  2a2a2a2a
000090  2a2a2a  
000093  2a2a2a2a          DCB      "******\r\n",0
000097  2a2a0d0a
00009b  00      
                  |L1.156|
00009c  b1cfd2b5          DCB      177,207,210,181,201,232,188,198,0
0000a0  c9e8bcc6
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L1.168|
0000a8  2a20c0fd          DCB      "* ",192,253,179,204,195,251,179,198,"   : %s\r\n",0
0000ac  b3ccc3fb
0000b0  b3c62020
0000b4  203a2025
0000b8  730d0a00
                  |L1.188|
0000bc  312e3200          DCB      "1.2",0
                  |L1.192|
0000c0  2a20c0fd          DCB      "* ",192,253,179,204,176,230,177,190,"   : %s\r\n",0
0000c4  b3ccb0e6
0000c8  b1be2020
0000cc  203a2025
0000d0  730d0a00
                  |L1.212|
0000d4  32303134          DCB      "2014-02-28",0
0000d8  2d30322d
0000dc  323800  
0000df  00                DCB      0
                  |L1.224|
0000e0  2a20b7a2          DCB      "* ",183,162,178,188,200,213,198,218,"   : %s\r\n",0
0000e4  b2bcc8d5
0000e8  c6da2020
0000ec  203a2025
0000f0  730d0a00
                  |L1.244|
0000f4  2a20b9cc          DCB      "* ",185,204,188,254,191,226,176,230,177,190," : V%d.%d."
0000f8  bcfebfe2
0000fc  b0e6b1be
000100  203a2056
000104  25642e25
000108  642e    
00010a  25642028          DCB      "%d (STM32F4xx_StdPeriph_Driver)\r\n",0
00010e  53544d33
000112  32463478
000116  785f5374
00011a  64506572
00011e  6970685f
000122  44726976
000126  6572290d
00012a  0a00    
                  |L1.300|
00012c  2a20b0b4          DCB      "* ",176,180,161,176,"1",161,177,207,212,202,190,215,238
000130  a1b031a1
000134  b1cfd4ca
000138  bed7ee  
00013b  bdfc3234          DCB      189,252,"24",208,161,202,177,202,253,190,221,"\r\n",0
00013f  d0a1cab1
000143  cafdbedd
000147  0d0a00  
00014a  00                DCB      0
00014b  00                DCB      0
                  |L1.332|
00014c  2a20b0b4          DCB      "* ",176,180,161,176,"2",161,177,207,212,202,190,215,238
000150  a1b032a1
000154  b1cfd4ca
000158  bed7ee  
00015b  bdfcd2bb          DCB      189,252,210,187,214,220,181,196,202,253,190,221,"\r\n",0
00015f  d6dcb5c4
000163  cafdbedd
000167  0d0a00  
00016a  00                DCB      0
00016b  00                DCB      0
                  |L1.364|
00016c  2a20b0b4          DCB      "* ",176,180,161,176,"3",161,177,207,212,202,190,215,238
000170  a1b033a1
000174  b1cfd4ca
000178  bed7ee  
00017b  bdfcd2bb          DCB      189,252,210,187,184,246,212,194,202,253,190,221,"\r\n",0
00017f  b8f6d4c2
000183  cafdbedd
000187  0d0a00  
00018a  00                DCB      0
00018b  00                DCB      0
                  |L1.396|
00018c  2a20b0b4          DCB      "* ",176,180,161,176,"4",161,177,207,212,202,190,215,238
000190  a1b034a1
000194  b1cfd4ca
000198  bed7ee  
00019b  d0c2b2c9          DCB      208,194,178,201,188,175,181,196,202,253,190,221,"\r\n",0
00019f  bcafb5c4
0001a3  cafdbedd
0001a7  0d0a00  
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L1.428|
0001ac  2a200a0d          DCB      "* \n\r",0
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  main PROC
;;;39     */
;;;40     int main(void)
000000  ed2d8b06          VPUSH    {d8-d10}
;;;41     {
000004  f5ad5db6          SUB      sp,sp,#0x16c0
;;;42     	/*
;;;43     		ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;44     	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM
;;;45     	*/
;;;46     	extern uint16_t adc1, adc2;
;;;47     	extern float volt1, volt2;
;;;48     	extern uint8_t aShowTime[50];
;;;49     	extern RTC_TimeTypeDef  RTC_TimeStructure;
;;;50     	extern RTC_DateTypeDef  RTC_DateStructure;
;;;51     	float a ;
;;;52     	unsigned char A[4],HalfHour[16*6*30+6],buf[16*6*30+6],cmd;
;;;53     	int i=0,j=0,k=0,m=0,n=0,x=0;
000008  2400              MOVS     r4,#0
00000a  2700              MOVS     r7,#0
00000c  2600              MOVS     r6,#0
00000e  46a0              MOV      r8,r4
000010  2500              MOVS     r5,#0
000012  46a1              MOV      r9,r4
;;;54     	bsp_Init();		/* 硬件初始化 */
000014  f7fffffe          BL       bsp_Init
;;;55     	PrintfLogo();	/* 打印例程信息到串口1 */
000018  f7fffffe          BL       PrintfLogo
;;;56     	while(1)
00001c  e24e              B        |L2.1212|
                  |L2.30|
;;;57     	{
;;;58     		bsp_Idle();
00001e  f7fffffe          BL       bsp_Idle
;;;59     		RTC_TimeShow();/*获取当前时间*/
000022  f7fffffe          BL       RTC_TimeShow
;;;60     		while(RTC_TimeStructure.RTC_Seconds%10!=0)
000026  e003              B        |L2.48|
                  |L2.40|
;;;61     		{
;;;62     			bsp_Idle();
000028  f7fffffe          BL       bsp_Idle
;;;63     			RTC_TimeShow();
00002c  f7fffffe          BL       RTC_TimeShow
                  |L2.48|
000030  48fe              LDR      r0,|L2.1068|
000032  7880              LDRB     r0,[r0,#2]            ;60  ; RTC_TimeStructure
000034  210a              MOVS     r1,#0xa               ;60
000036  fb90f2f1          SDIV     r2,r0,r1              ;60
00003a  fb010012          MLS      r0,r1,r2,r0           ;60
00003e  2800              CMP      r0,#0                 ;60
000040  d1f2              BNE      |L2.40|
;;;64     		}
;;;65     		/*在页头记录时间*/
;;;66     		if(i==0)
000042  bb0c              CBNZ     r4,|L2.136|
;;;67     		{ RTC_DateShow();
000044  f7fffffe          BL       RTC_DateShow
;;;68     			HalfHour[i++]=RTC_DateStructure.RTC_Year;
000048  48f9              LDR      r0,|L2.1072|
00004a  78c2              LDRB     r2,[r0,#3]  ; RTC_DateStructure
00004c  4620              MOV      r0,r4
00004e  1c64              ADDS     r4,r4,#1
000050  f60d3174          ADD      r1,sp,#0xb74
000054  540a              STRB     r2,[r1,r0]
;;;69     			HalfHour[i++]=RTC_DateStructure.RTC_Month;
000056  48f6              LDR      r0,|L2.1072|
000058  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
00005a  4620              MOV      r0,r4
00005c  1c64              ADDS     r4,r4,#1
00005e  540a              STRB     r2,[r1,r0]
;;;70     			HalfHour[i++]=RTC_DateStructure.RTC_Date;
000060  48f3              LDR      r0,|L2.1072|
000062  7882              LDRB     r2,[r0,#2]  ; RTC_DateStructure
000064  4620              MOV      r0,r4
000066  1c64              ADDS     r4,r4,#1
000068  540a              STRB     r2,[r1,r0]
;;;71     			HalfHour[i++]=RTC_TimeStructure.RTC_Hours;
00006a  48f0              LDR      r0,|L2.1068|
00006c  7802              LDRB     r2,[r0,#0]  ; RTC_TimeStructure
00006e  4620              MOV      r0,r4
000070  1c64              ADDS     r4,r4,#1
000072  540a              STRB     r2,[r1,r0]
;;;72     			HalfHour[i++]=RTC_TimeStructure.RTC_Minutes;
000074  48ed              LDR      r0,|L2.1068|
000076  7842              LDRB     r2,[r0,#1]  ; RTC_TimeStructure
000078  4620              MOV      r0,r4
00007a  1c64              ADDS     r4,r4,#1
00007c  540a              STRB     r2,[r1,r0]
;;;73     			HalfHour[i++]=RTC_TimeStructure.RTC_Seconds;
00007e  48eb              LDR      r0,|L2.1068|
000080  7882              LDRB     r2,[r0,#2]  ; RTC_TimeStructure
000082  4620              MOV      r0,r4
000084  1c64              ADDS     r4,r4,#1
000086  540a              STRB     r2,[r1,r0]
                  |L2.136|
;;;74     		}
;;;75     		RTC_TimeShow();
000088  f7fffffe          BL       RTC_TimeShow
;;;76     		bsp_DelayMS(1000);
00008c  f44f707a          MOV      r0,#0x3e8
000090  f7fffffe          BL       bsp_DelayMS
;;;77     		/*采集数据*/
;;;78     		GetAD7705();
000094  f7fffffe          BL       GetAD7705
;;;79     		GetBMP085();
000098  f7fffffe          BL       GetBMP085
;;;80     		/*数据转换为Flash易存储形式*/
;;;81     		a =volt1;
00009c  48e5              LDR      r0,|L2.1076|
00009e  ed900a00          VLDR     s0,[r0,#0]
0000a2  eeb08a40          VMOV.F32 s16,s0
;;;82     		F2CA(A,a); /*float->charArray*/
0000a6  eeb00a48          VMOV.F32 s0,s16
0000aa  f24160bc          MOV      r0,#0x16bc
0000ae  4468              ADD      r0,r0,sp
0000b0  f7fffffe          BL       F2CA
;;;83     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
0000b4  f50d5080          ADD      r0,sp,#0x1000
0000b8  f89036bc          LDRB     r3,[r0,#0x6bc]
0000bc  4621              MOV      r1,r4
0000be  1c64              ADDS     r4,r4,#1
0000c0  f60d3074          ADD      r0,sp,#0xb74
0000c4  5443              STRB     r3,[r0,r1]
0000c6  f50d5080          ADD      r0,sp,#0x1000
0000ca  f89036bd          LDRB     r3,[r0,#0x6bd]
0000ce  4621              MOV      r1,r4
0000d0  1c64              ADDS     r4,r4,#1
0000d2  f60d3074          ADD      r0,sp,#0xb74
0000d6  5443              STRB     r3,[r0,r1]
0000d8  f50d5080          ADD      r0,sp,#0x1000
0000dc  f89036be          LDRB     r3,[r0,#0x6be]
0000e0  4621              MOV      r1,r4
0000e2  1c64              ADDS     r4,r4,#1
0000e4  f60d3074          ADD      r0,sp,#0xb74
0000e8  5443              STRB     r3,[r0,r1]
0000ea  f50d5080          ADD      r0,sp,#0x1000
0000ee  f89036bf          LDRB     r3,[r0,#0x6bf]
0000f2  4621              MOV      r1,r4
0000f4  1c64              ADDS     r4,r4,#1
0000f6  f60d3074          ADD      r0,sp,#0xb74
0000fa  5443              STRB     r3,[r0,r1]
;;;84     		a =volt2;
0000fc  48ce              LDR      r0,|L2.1080|
0000fe  ed900a00          VLDR     s0,[r0,#0]
000102  eeb08a40          VMOV.F32 s16,s0
;;;85     		F2CA(A,a); /*float->charArray*/
000106  eeb00a48          VMOV.F32 s0,s16
00010a  f24160bc          MOV      r0,#0x16bc
00010e  4468              ADD      r0,r0,sp
000110  f7fffffe          BL       F2CA
;;;86     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
000114  f50d5080          ADD      r0,sp,#0x1000
000118  f89026bc          LDRB     r2,[r0,#0x6bc]
00011c  4621              MOV      r1,r4
00011e  1c64              ADDS     r4,r4,#1
000120  f60d3074          ADD      r0,sp,#0xb74
000124  5442              STRB     r2,[r0,r1]
000126  f50d5080          ADD      r0,sp,#0x1000
00012a  f89036bd          LDRB     r3,[r0,#0x6bd]
00012e  4621              MOV      r1,r4
000130  1c64              ADDS     r4,r4,#1
000132  f60d3074          ADD      r0,sp,#0xb74
000136  5443              STRB     r3,[r0,r1]
000138  f50d5080          ADD      r0,sp,#0x1000
00013c  f89026be          LDRB     r2,[r0,#0x6be]
000140  4620              MOV      r0,r4
000142  1c64              ADDS     r4,r4,#1
000144  f60d3174          ADD      r1,sp,#0xb74
000148  540a              STRB     r2,[r1,r0]
00014a  f50d5080          ADD      r0,sp,#0x1000
00014e  f89036bf          LDRB     r3,[r0,#0x6bf]
000152  4621              MOV      r1,r4
000154  1c64              ADDS     r4,r4,#1
000156  f60d3074          ADD      r0,sp,#0xb74
00015a  5443              STRB     r3,[r0,r1]
;;;87     		a =(float)g_tBMP085.Temp;
00015c  48b7              LDR      r0,|L2.1084|
00015e  ed900a06          VLDR     s0,[r0,#0x18]
000162  eeb80ac0          VCVT.F32.S32 s0,s0
000166  eeb08a40          VMOV.F32 s16,s0
;;;88     		F2CA(A,a); /*float->charArray*/
00016a  eeb00a48          VMOV.F32 s0,s16
00016e  f24160bc          MOV      r0,#0x16bc
000172  4468              ADD      r0,r0,sp
000174  f7fffffe          BL       F2CA
;;;89     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
000178  f50d5080          ADD      r0,sp,#0x1000
00017c  f89026bc          LDRB     r2,[r0,#0x6bc]
000180  4620              MOV      r0,r4
000182  1c64              ADDS     r4,r4,#1
000184  f60d3174          ADD      r1,sp,#0xb74
000188  540a              STRB     r2,[r1,r0]
00018a  f50d5080          ADD      r0,sp,#0x1000
00018e  f89026bd          LDRB     r2,[r0,#0x6bd]
000192  4620              MOV      r0,r4
000194  1c64              ADDS     r4,r4,#1
000196  540a              STRB     r2,[r1,r0]
000198  f50d5080          ADD      r0,sp,#0x1000
00019c  f89026be          LDRB     r2,[r0,#0x6be]
0001a0  4620              MOV      r0,r4
0001a2  1c64              ADDS     r4,r4,#1
0001a4  540a              STRB     r2,[r1,r0]
0001a6  f50d5080          ADD      r0,sp,#0x1000
0001aa  f89036bf          LDRB     r3,[r0,#0x6bf]
0001ae  4621              MOV      r1,r4
0001b0  1c64              ADDS     r4,r4,#1
0001b2  f60d3074          ADD      r0,sp,#0xb74
0001b6  5443              STRB     r3,[r0,r1]
;;;90     		a =(float)g_tBMP085.Press;
0001b8  48a0              LDR      r0,|L2.1084|
0001ba  ed900a07          VLDR     s0,[r0,#0x1c]
0001be  eeb80ac0          VCVT.F32.S32 s0,s0
0001c2  eeb08a40          VMOV.F32 s16,s0
;;;91     		F2CA(A,a); /*float->charArray*/
0001c6  eeb00a48          VMOV.F32 s0,s16
0001ca  f24160bc          MOV      r0,#0x16bc
0001ce  4468              ADD      r0,r0,sp
0001d0  f7fffffe          BL       F2CA
;;;92     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
0001d4  f50d5080          ADD      r0,sp,#0x1000
0001d8  f89036bc          LDRB     r3,[r0,#0x6bc]
0001dc  4621              MOV      r1,r4
0001de  1c64              ADDS     r4,r4,#1
0001e0  f60d3074          ADD      r0,sp,#0xb74
0001e4  5443              STRB     r3,[r0,r1]
0001e6  f50d5080          ADD      r0,sp,#0x1000
0001ea  f89026bd          LDRB     r2,[r0,#0x6bd]
0001ee  4621              MOV      r1,r4
0001f0  1c64              ADDS     r4,r4,#1
0001f2  f60d3074          ADD      r0,sp,#0xb74
0001f6  5442              STRB     r2,[r0,r1]
0001f8  f50d5080          ADD      r0,sp,#0x1000
0001fc  f89026be          LDRB     r2,[r0,#0x6be]
000200  4621              MOV      r1,r4
000202  1c64              ADDS     r4,r4,#1
000204  f60d3074          ADD      r0,sp,#0xb74
000208  5442              STRB     r2,[r0,r1]
00020a  f50d5080          ADD      r0,sp,#0x1000
00020e  f89026bf          LDRB     r2,[r0,#0x6bf]
000212  4621              MOV      r1,r4
000214  1c64              ADDS     r4,r4,#1
000216  f60d3074          ADD      r0,sp,#0xb74
00021a  5442              STRB     r2,[r0,r1]
;;;93     		
;;;94     		/*判断是否需要相应上位机*/
;;;95     		if (comGetChar(COM1, &cmd))	/* 从串口读入一个字符(非阻塞方式) */
00021c  a90a              ADD      r1,sp,#0x28
00021e  2000              MOVS     r0,#0
000220  f7fffffe          BL       comGetChar
000224  2800              CMP      r0,#0
000226  d075              BEQ      |L2.788|
;;;96     		{
;;;97     			switch (cmd)
000228  f89d0028          LDRB     r0,[sp,#0x28]
00022c  2831              CMP      r0,#0x31
00022e  d006              BEQ      |L2.574|
000230  2832              CMP      r0,#0x32
000232  d049              BEQ      |L2.712|
000234  2833              CMP      r0,#0x33
000236  d06e              BEQ      |L2.790|
000238  2834              CMP      r0,#0x34
00023a  d16d              BNE      |L2.792|
00023c  e0d1              B        |L2.994|
                  |L2.574|
;;;98     			{
;;;99     				case '1':
;;;100    					/*输出SPI Flash中的数据*/
;;;101    					for(k=j-47;k<j;k++)
00023e  f1a7062f          SUB      r6,r7,#0x2f
000242  e01d              B        |L2.640|
                  |L2.580|
;;;102    					{
;;;103    						/*解决k小于0的问题*/
;;;104    						if(k>=0)
000244  2e00              CMP      r6,#0
000246  db01              BLT      |L2.588|
;;;105    							m=k;
000248  46b0              MOV      r8,r6
00024a  e001              B        |L2.592|
                  |L2.588|
;;;106    						else
;;;107    							m=2*24*30+k;
00024c  f50668b4          ADD      r8,r6,#0x5a0
                  |L2.592|
;;;108    						/*输出 n*半小时 前 测量数据*/
;;;109    						sf_ReadBuffer(buf, m * g_tSF.PageSize+i-16, 16);	
000250  487b              LDR      r0,|L2.1088|
000252  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000254  fb084000          MLA      r0,r8,r0,r4
000258  f1a00110          SUB      r1,r0,#0x10
00025c  2210              MOVS     r2,#0x10
00025e  a80b              ADD      r0,sp,#0x2c
000260  f7fffffe          BL       sf_ReadBuffer
;;;110    						for(n=0;n<16;n++)
000264  2500              MOVS     r5,#0
000266  e005              B        |L2.628|
                  |L2.616|
;;;111    						{
;;;112    							printf(" %02X",buf[n]);
000268  a80b              ADD      r0,sp,#0x2c
00026a  5d41              LDRB     r1,[r0,r5]
00026c  a075              ADR      r0,|L2.1092|
00026e  f7fffffe          BL       __2printf
000272  1c6d              ADDS     r5,r5,#1              ;110
                  |L2.628|
000274  2d10              CMP      r5,#0x10              ;110
000276  dbf7              BLT      |L2.616|
;;;113    						}
;;;114    						printf("\r\n");
000278  a074              ADR      r0,|L2.1100|
00027a  f7fffffe          BL       __2printf
00027e  1c76              ADDS     r6,r6,#1              ;101
                  |L2.640|
000280  42be              CMP      r6,r7                 ;101
000282  dbdf              BLT      |L2.580|
;;;115    						
;;;116    					}
;;;117    					/*打印最新采集到的数据*/
;;;118    					for(n=i-16;n<i;n++)
000284  f1a40510          SUB      r5,r4,#0x10
000288  e008              B        |L2.668|
                  |L2.650|
;;;119    						{
;;;120    							printf(" %02X",HalfHour[n]);
00028a  f60d3074          ADD      r0,sp,#0xb74
00028e  5d41              LDRB     r1,[r0,r5]
000290  a06c              ADR      r0,|L2.1092|
000292  f7fffffe          BL       __2printf
;;;121    							x++;
000296  f1090901          ADD      r9,r9,#1
00029a  1c6d              ADDS     r5,r5,#1              ;118
                  |L2.668|
00029c  42a5              CMP      r5,r4                 ;118
00029e  dbf4              BLT      |L2.650|
;;;122    						}
;;;123    					printf("\r\n");
0002a0  a06a              ADR      r0,|L2.1100|
0002a2  f7fffffe          BL       __2printf
;;;124    					/*打印当前时间*/
;;;125    					printf(" %d %d %d %d %d %d\r\n",
0002a6  4861              LDR      r0,|L2.1068|
0002a8  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
0002aa  4960              LDR      r1,|L2.1068|
0002ac  7849              LDRB     r1,[r1,#1]  ; RTC_TimeStructure
0002ae  4a5f              LDR      r2,|L2.1068|
0002b0  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
0002b2  e9cd2100          STRD     r2,r1,[sp,#0]
0002b6  9002              STR      r0,[sp,#8]
0002b8  485d              LDR      r0,|L2.1072|
0002ba  7883              LDRB     r3,[r0,#2]  ; RTC_DateStructure
0002bc  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
0002be  78c1              LDRB     r1,[r0,#3]  ; RTC_DateStructure
0002c0  a063              ADR      r0,|L2.1104|
0002c2  f7fffffe          BL       __2printf
;;;126    					RTC_DateStructure.RTC_Year,
;;;127    					RTC_DateStructure.RTC_Month,
;;;128    					RTC_DateStructure.RTC_Date,
;;;129    					RTC_TimeStructure.RTC_Hours,
;;;130    					RTC_TimeStructure.RTC_Minutes,
;;;131    					RTC_TimeStructure.RTC_Seconds);
;;;132    					break;
0002c6  e0de              B        |L2.1158|
                  |L2.712|
;;;133    						
;;;134    				case '2':
;;;135    					/*输出SPI Flash中的数据*/
;;;136    					for(k=j-335;k<j;k++)
0002c8  f2a7164f          SUB      r6,r7,#0x14f
0002cc  e01d              B        |L2.778|
                  |L2.718|
;;;137    					{
;;;138    						/*解决k小于0的问题*/
;;;139    						if(k>=0)
0002ce  2e00              CMP      r6,#0
0002d0  db01              BLT      |L2.726|
;;;140    							m=k;
0002d2  46b0              MOV      r8,r6
0002d4  e001              B        |L2.730|
                  |L2.726|
;;;141    						else
;;;142    							m=2*24*30+k;
0002d6  f50668b4          ADD      r8,r6,#0x5a0
                  |L2.730|
;;;143    						/*输出 n*半小时 前 测量数据*/
;;;144    						sf_ReadBuffer(buf, m * g_tSF.PageSize+i-16, 16);	
0002da  4859              LDR      r0,|L2.1088|
0002dc  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
0002de  fb084000          MLA      r0,r8,r0,r4
0002e2  f1a00110          SUB      r1,r0,#0x10
0002e6  2210              MOVS     r2,#0x10
0002e8  a80b              ADD      r0,sp,#0x2c
0002ea  f7fffffe          BL       sf_ReadBuffer
;;;145    						for(n=0;n<16;n++)
0002ee  2500              MOVS     r5,#0
0002f0  e005              B        |L2.766|
                  |L2.754|
;;;146    						{
;;;147    							printf(" %02X",buf[n]);
0002f2  a80b              ADD      r0,sp,#0x2c
0002f4  5d41              LDRB     r1,[r0,r5]
0002f6  a053              ADR      r0,|L2.1092|
0002f8  f7fffffe          BL       __2printf
0002fc  1c6d              ADDS     r5,r5,#1              ;145
                  |L2.766|
0002fe  2d10              CMP      r5,#0x10              ;145
000300  dbf7              BLT      |L2.754|
;;;148    						}
;;;149    						printf("\r\n");
000302  a052              ADR      r0,|L2.1100|
000304  f7fffffe          BL       __2printf
000308  1c76              ADDS     r6,r6,#1              ;136
                  |L2.778|
00030a  42be              CMP      r6,r7                 ;136
00030c  dbdf              BLT      |L2.718|
;;;150    						
;;;151    					}
;;;152    					/*打印最新采集到的数据*/
;;;153    					for(n=i-16;n<i;n++)
00030e  f1a40510          SUB      r5,r4,#0x10
000312  e00b              B        |L2.812|
                  |L2.788|
000314  e0b8              B        |L2.1160|
                  |L2.790|
000316  e01f              B        |L2.856|
                  |L2.792|
000318  e0b1              B        |L2.1150|
                  |L2.794|
;;;154    						{
;;;155    							printf(" %02X",HalfHour[n]);
00031a  f60d3074          ADD      r0,sp,#0xb74
00031e  5d41              LDRB     r1,[r0,r5]
000320  a048              ADR      r0,|L2.1092|
000322  f7fffffe          BL       __2printf
;;;156    							x++;
000326  f1090901          ADD      r9,r9,#1
00032a  1c6d              ADDS     r5,r5,#1              ;153
                  |L2.812|
00032c  42a5              CMP      r5,r4                 ;153
00032e  dbf4              BLT      |L2.794|
;;;157    						}
;;;158    					printf("\r\n");
000330  a046              ADR      r0,|L2.1100|
000332  f7fffffe          BL       __2printf
;;;159    					/*打印当前时间*/
;;;160    					printf(" %d %d %d %d %d %d\r\n",
000336  483d              LDR      r0,|L2.1068|
000338  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
00033a  493c              LDR      r1,|L2.1068|
00033c  7849              LDRB     r1,[r1,#1]  ; RTC_TimeStructure
00033e  4a3b              LDR      r2,|L2.1068|
000340  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
000342  e9cd2100          STRD     r2,r1,[sp,#0]
000346  9002              STR      r0,[sp,#8]
000348  4839              LDR      r0,|L2.1072|
00034a  7883              LDRB     r3,[r0,#2]  ; RTC_DateStructure
00034c  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
00034e  78c1              LDRB     r1,[r0,#3]  ; RTC_DateStructure
000350  a03f              ADR      r0,|L2.1104|
000352  f7fffffe          BL       __2printf
;;;161    					RTC_DateStructure.RTC_Year,
;;;162    					RTC_DateStructure.RTC_Month,
;;;163    					RTC_DateStructure.RTC_Date,
;;;164    					RTC_TimeStructure.RTC_Hours,
;;;165    					RTC_TimeStructure.RTC_Minutes,
;;;166    					RTC_TimeStructure.RTC_Seconds);
;;;167    					break;
000356  e096              B        |L2.1158|
                  |L2.856|
;;;168    						
;;;169    			case '3':
;;;170    					/*输出SPI Flash中的数据*/
;;;171    					for(k=j-1439;k<j;k++)
000358  f2a7569f          SUB      r6,r7,#0x59f
00035c  e01d              B        |L2.922|
                  |L2.862|
;;;172    					{
;;;173    						/*解决k小于0的问题*/
;;;174    						if(k>=0)
00035e  2e00              CMP      r6,#0
000360  db01              BLT      |L2.870|
;;;175    							m=k;
000362  46b0              MOV      r8,r6
000364  e001              B        |L2.874|
                  |L2.870|
;;;176    						else
;;;177    							m=2*24*30+k;
000366  f50668b4          ADD      r8,r6,#0x5a0
                  |L2.874|
;;;178    						/*输出 n*半小时 前 测量数据*/
;;;179    						sf_ReadBuffer(buf, m * g_tSF.PageSize+i-16, 16);	
00036a  4835              LDR      r0,|L2.1088|
00036c  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00036e  fb084000          MLA      r0,r8,r0,r4
000372  f1a00110          SUB      r1,r0,#0x10
000376  2210              MOVS     r2,#0x10
000378  a80b              ADD      r0,sp,#0x2c
00037a  f7fffffe          BL       sf_ReadBuffer
;;;180    						for(n=0;n<16;n++)
00037e  2500              MOVS     r5,#0
000380  e005              B        |L2.910|
                  |L2.898|
;;;181    						{
;;;182    							printf(" %02X",buf[n]);
000382  a80b              ADD      r0,sp,#0x2c
000384  5d41              LDRB     r1,[r0,r5]
000386  a02f              ADR      r0,|L2.1092|
000388  f7fffffe          BL       __2printf
00038c  1c6d              ADDS     r5,r5,#1              ;180
                  |L2.910|
00038e  2d10              CMP      r5,#0x10              ;180
000390  dbf7              BLT      |L2.898|
;;;183    						}
;;;184    						printf("\r\n");
000392  a02e              ADR      r0,|L2.1100|
000394  f7fffffe          BL       __2printf
000398  1c76              ADDS     r6,r6,#1              ;171
                  |L2.922|
00039a  42be              CMP      r6,r7                 ;171
00039c  dbdf              BLT      |L2.862|
;;;185    						
;;;186    					}
;;;187    					/*打印最新采集到的数据*/
;;;188    					for(n=i-16;n<i;n++)
00039e  f1a40510          SUB      r5,r4,#0x10
0003a2  e008              B        |L2.950|
                  |L2.932|
;;;189    						{
;;;190    							printf(" %02X",HalfHour[n]);
0003a4  f60d3074          ADD      r0,sp,#0xb74
0003a8  5d41              LDRB     r1,[r0,r5]
0003aa  a026              ADR      r0,|L2.1092|
0003ac  f7fffffe          BL       __2printf
;;;191    							x++;
0003b0  f1090901          ADD      r9,r9,#1
0003b4  1c6d              ADDS     r5,r5,#1              ;188
                  |L2.950|
0003b6  42a5              CMP      r5,r4                 ;188
0003b8  dbf4              BLT      |L2.932|
;;;192    						}
;;;193    					printf("\r\n");
0003ba  a024              ADR      r0,|L2.1100|
0003bc  f7fffffe          BL       __2printf
;;;194    					/*打印当前时间*/
;;;195    					printf(" %d %d %d %d %d %d\r\n",
0003c0  481a              LDR      r0,|L2.1068|
0003c2  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
0003c4  4919              LDR      r1,|L2.1068|
0003c6  7849              LDRB     r1,[r1,#1]  ; RTC_TimeStructure
0003c8  4a18              LDR      r2,|L2.1068|
0003ca  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
0003cc  e9cd2100          STRD     r2,r1,[sp,#0]
0003d0  9002              STR      r0,[sp,#8]
0003d2  4817              LDR      r0,|L2.1072|
0003d4  7883              LDRB     r3,[r0,#2]  ; RTC_DateStructure
0003d6  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
0003d8  78c1              LDRB     r1,[r0,#3]  ; RTC_DateStructure
0003da  a01d              ADR      r0,|L2.1104|
0003dc  f7fffffe          BL       __2printf
;;;196    					RTC_DateStructure.RTC_Year,
;;;197    					RTC_DateStructure.RTC_Month,
;;;198    					RTC_DateStructure.RTC_Date,
;;;199    					RTC_TimeStructure.RTC_Hours,
;;;200    					RTC_TimeStructure.RTC_Minutes,
;;;201    					RTC_TimeStructure.RTC_Seconds);
;;;202    					break;
0003e0  e051              B        |L2.1158|
                  |L2.994|
;;;203    
;;;204    			case '4':
;;;205    					printf("%d,%d,%d,%d,%d,%2d,%10f,%10f,%10d,%10d \r\n",
0003e2  4815              LDR      r0,|L2.1080|
0003e4  6800              LDR      r0,[r0,#0]  ; volt2
0003e6  f7fffffe          BL       __aeabi_f2d
0003ea  ec410b10          VMOV     d0,r0,r1
0003ee  eeb09a40          VMOV.F32 s18,s0
0003f2  eef09a60          VMOV.F32 s19,s1
0003f6  480f              LDR      r0,|L2.1076|
0003f8  6800              LDR      r0,[r0,#0]  ; volt1
0003fa  f7fffffe          BL       __aeabi_f2d
0003fe  ec410b10          VMOV     d0,r0,r1
000402  eeb0aa40          VMOV.F32 s20,s0
000406  eef0aa60          VMOV.F32 s21,s1
00040a  480c              LDR      r0,|L2.1084|
00040c  69c0              LDR      r0,[r0,#0x1c]  ; g_tBMP085
00040e  490b              LDR      r1,|L2.1084|
000410  6989              LDR      r1,[r1,#0x18]  ; g_tBMP085
000412  e9cd1008          STRD     r1,r0,[sp,#0x20]
000416  ed8d9b06          VSTR     d9,[sp,#0x18]
00041a  ed8dab04          VSTR     d10,[sp,#0x10]
00041e  4803              LDR      r0,|L2.1068|
000420  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
000422  4902              LDR      r1,|L2.1068|
000424  7849              LDRB     r1,[r1,#1]  ; RTC_TimeStructure
000426  4a01              LDR      r2,|L2.1068|
000428  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
00042a  e01d              B        |L2.1128|
                  |L2.1068|
                          DCD      RTC_TimeStructure
                  |L2.1072|
                          DCD      RTC_DateStructure
                  |L2.1076|
                          DCD      volt1
                  |L2.1080|
                          DCD      volt2
                  |L2.1084|
                          DCD      g_tBMP085
                  |L2.1088|
                          DCD      g_tSF
                  |L2.1092|
000444  20253032          DCB      " %02X",0
000448  5800    
00044a  00                DCB      0
00044b  00                DCB      0
                  |L2.1100|
00044c  0d0a00            DCB      "\r\n",0
00044f  00                DCB      0
                  |L2.1104|
000450  20256420          DCB      " %d %d %d %d %d %d\r\n",0
000454  25642025
000458  64202564
00045c  20256420
000460  25640d0a
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L2.1128|
000468  e9cd2100          STRD     r2,r1,[sp,#0]
00046c  9002              STR      r0,[sp,#8]
00046e  4814              LDR      r0,|L2.1216|
000470  7883              LDRB     r3,[r0,#2]  ; RTC_DateStructure
000472  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
000474  78c1              LDRB     r1,[r0,#3]  ; RTC_DateStructure
000476  a013              ADR      r0,|L2.1220|
000478  f7fffffe          BL       __2printf
;;;206    					RTC_DateStructure.RTC_Year,
;;;207    					RTC_DateStructure.RTC_Month,
;;;208    					RTC_DateStructure.RTC_Date,
;;;209    					RTC_TimeStructure.RTC_Hours,
;;;210    					RTC_TimeStructure.RTC_Minutes,
;;;211    					RTC_TimeStructure.RTC_Seconds,volt1,volt2,g_tBMP085.Temp,g_tBMP085.Press);
;;;212    					break;
00047c  e003              B        |L2.1158|
                  |L2.1150|
;;;213    						
;;;214    				default:
;;;215    					printf("Wrong");	/* 无效命令，重新打印命令提示 */
00047e  a01c              ADR      r0,|L2.1264|
000480  f7fffffe          BL       __2printf
;;;216    					break;
000484  bf00              NOP      
                  |L2.1158|
000486  bf00              NOP                            ;132
                  |L2.1160|
;;;217    
;;;218    			}
;;;219    		}
;;;220    		/*半小时数据采集完成*/
;;;221    		/* 在j页中写入半小时的数据 */
;;;222    		if(i==16*6*30+6)
000488  f5a46030          SUB      r0,r4,#0xb00
00048c  3846              SUBS     r0,r0,#0x46
00048e  d115              BNE      |L2.1212|
;;;223    		{
;;;224    			i=0;
000490  2400              MOVS     r4,#0
;;;225    			bsp_InitSFlash();
000492  f7fffffe          BL       bsp_InitSFlash
;;;226    			if (sf_WriteBuffer(HalfHour, j * g_tSF.PageSize, 16*6*30+6) == 0)
000496  4818              LDR      r0,|L2.1272|
000498  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00049a  fb00f107          MUL      r1,r0,r7
00049e  f6403246          MOV      r2,#0xb46
0004a2  f60d3074          ADD      r0,sp,#0xb74
0004a6  f7fffffe          BL       sf_WriteBuffer
0004aa  b910              CBNZ     r0,|L2.1202|
;;;227    			{
;;;228    				printf("写串行Flash出错！\r\n");
0004ac  a013              ADR      r0,|L2.1276|
0004ae  f7fffffe          BL       __2printf
                  |L2.1202|
;;;229    			}
;;;230    			j++;
0004b2  1c7f              ADDS     r7,r7,#1
;;;231    			/*判断是否超出存储空间,超出复位0*/
;;;232    			if(j==2*24*30)
0004b4  f5b76fb4          CMP      r7,#0x5a0
0004b8  d100              BNE      |L2.1212|
;;;233    			{
;;;234    				j=0;
0004ba  2700              MOVS     r7,#0
                  |L2.1212|
0004bc  e5af              B        |L2.30|
;;;235    			}
;;;236    		
;;;237    		}
;;;238    	}
;;;239    }
;;;240    
                          ENDP

0004be  0000              DCW      0x0000
                  |L2.1216|
                          DCD      RTC_DateStructure
                  |L2.1220|
0004c4  25642c25          DCB      "%d,%d,%d,%d,%d,%2d,%10f,%10f,%10d,%10d \r\n",0
0004c8  642c2564
0004cc  2c25642c
0004d0  25642c25
0004d4  32642c25
0004d8  3130662c
0004dc  25313066
0004e0  2c253130
0004e4  642c2531
0004e8  3064200d
0004ec  0a00    
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L2.1264|
0004f0  57726f6e          DCB      "Wrong",0
0004f4  6700    
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L2.1272|
                          DCD      g_tSF
                  |L2.1276|
0004fc  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,246,180,237,163,161,"\r"
000500  d0d0466c
000504  617368b3
000508  f6b4eda3
00050c  a10d    
00050e  0a00              DCB      "\n",0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
