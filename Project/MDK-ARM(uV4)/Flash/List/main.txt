; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  PrintfLogo PROC
;;;308    */
;;;309    static void PrintfLogo(void)
000000  b510              PUSH     {r4,lr}
;;;310    {
;;;311    	printf("\r\n");
000002  a015              ADR      r0,|L1.88|
000004  f7fffffe          BL       __2printf
;;;312    	printf("*************************************************************\r\n");
000008  a014              ADR      r0,|L1.92|
00000a  f7fffffe          BL       __2printf
;;;313    	printf("* 例程名称   : %s\r\n", EXAMPLE_NAME);	/* 打印例程名称 */
00000e  a123              ADR      r1,|L1.156|
000010  a025              ADR      r0,|L1.168|
000012  f7fffffe          BL       __2printf
;;;314    	printf("* 例程版本   : %s\r\n", DEMO_VER);		/* 打印例程版本 */
000016  a129              ADR      r1,|L1.188|
000018  a029              ADR      r0,|L1.192|
00001a  f7fffffe          BL       __2printf
;;;315    	printf("* 发布日期   : %s\r\n", EXAMPLE_DATE);	/* 打印例程日期 */
00001e  a12d              ADR      r1,|L1.212|
000020  a02f              ADR      r0,|L1.224|
000022  f7fffffe          BL       __2printf
;;;316    
;;;317    	/* 打印ST固件库版本，这3个定义宏在stm32f10x.h文件中 */
;;;318    	printf("* 固件库版本 : V%d.%d.%d (STM32F4xx_StdPeriph_Driver)\r\n", __STM32F4XX_STDPERIPH_VERSION_MAIN,
000026  2300              MOVS     r3,#0
000028  2203              MOVS     r2,#3
00002a  2101              MOVS     r1,#1
00002c  a031              ADR      r0,|L1.244|
00002e  f7fffffe          BL       __2printf
;;;319    			__STM32F4XX_STDPERIPH_VERSION_SUB1,__STM32F4XX_STDPERIPH_VERSION_SUB2);
;;;320    	/*功能描述*/
;;;321    	printf("* 按“1”显示最近24小时数据\r\n");	
000032  a03e              ADR      r0,|L1.300|
000034  f7fffffe          BL       __2printf
;;;322    	printf("* 按“2”显示最近一周的数据\r\n");	
000038  a044              ADR      r0,|L1.332|
00003a  f7fffffe          BL       __2printf
;;;323    	printf("* 按“3”显示最近一个月数据\r\n");	
00003e  a04b              ADR      r0,|L1.364|
000040  f7fffffe          BL       __2printf
;;;324    	printf("* 按“4”显示最新采集的数据\r\n");
000044  a051              ADR      r0,|L1.396|
000046  f7fffffe          BL       __2printf
;;;325    	printf("* \n\r");	/* 打印一行空格 */
00004a  a058              ADR      r0,|L1.428|
00004c  f7fffffe          BL       __2printf
;;;326    	printf("*************************************************************\r\n");
000050  a002              ADR      r0,|L1.92|
000052  f7fffffe          BL       __2printf
;;;327    }
000056  bd10              POP      {r4,pc}
;;;328    
                          ENDP

                  |L1.88|
000058  0d0a00            DCB      "\r\n",0
00005b  00                DCB      0
                  |L1.92|
00005c  2a2a2a2a          DCB      "*******************************************************"
000060  2a2a2a2a
000064  2a2a2a2a
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a2a2a2a
000088  2a2a2a2a
00008c  2a2a2a2a
000090  2a2a2a  
000093  2a2a2a2a          DCB      "******\r\n",0
000097  2a2a0d0a
00009b  00      
                  |L1.156|
00009c  b1cfd2b5          DCB      177,207,210,181,201,232,188,198,0
0000a0  c9e8bcc6
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L1.168|
0000a8  2a20c0fd          DCB      "* ",192,253,179,204,195,251,179,198,"   : %s\r\n",0
0000ac  b3ccc3fb
0000b0  b3c62020
0000b4  203a2025
0000b8  730d0a00
                  |L1.188|
0000bc  312e3200          DCB      "1.2",0
                  |L1.192|
0000c0  2a20c0fd          DCB      "* ",192,253,179,204,176,230,177,190,"   : %s\r\n",0
0000c4  b3ccb0e6
0000c8  b1be2020
0000cc  203a2025
0000d0  730d0a00
                  |L1.212|
0000d4  32303134          DCB      "2014-02-28",0
0000d8  2d30322d
0000dc  323800  
0000df  00                DCB      0
                  |L1.224|
0000e0  2a20b7a2          DCB      "* ",183,162,178,188,200,213,198,218,"   : %s\r\n",0
0000e4  b2bcc8d5
0000e8  c6da2020
0000ec  203a2025
0000f0  730d0a00
                  |L1.244|
0000f4  2a20b9cc          DCB      "* ",185,204,188,254,191,226,176,230,177,190," : V%d.%d."
0000f8  bcfebfe2
0000fc  b0e6b1be
000100  203a2056
000104  25642e25
000108  642e    
00010a  25642028          DCB      "%d (STM32F4xx_StdPeriph_Driver)\r\n",0
00010e  53544d33
000112  32463478
000116  785f5374
00011a  64506572
00011e  6970685f
000122  44726976
000126  6572290d
00012a  0a00    
                  |L1.300|
00012c  2a20b0b4          DCB      "* ",176,180,161,176,"1",161,177,207,212,202,190,215,238
000130  a1b031a1
000134  b1cfd4ca
000138  bed7ee  
00013b  bdfc3234          DCB      189,252,"24",208,161,202,177,202,253,190,221,"\r\n",0
00013f  d0a1cab1
000143  cafdbedd
000147  0d0a00  
00014a  00                DCB      0
00014b  00                DCB      0
                  |L1.332|
00014c  2a20b0b4          DCB      "* ",176,180,161,176,"2",161,177,207,212,202,190,215,238
000150  a1b032a1
000154  b1cfd4ca
000158  bed7ee  
00015b  bdfcd2bb          DCB      189,252,210,187,214,220,181,196,202,253,190,221,"\r\n",0
00015f  d6dcb5c4
000163  cafdbedd
000167  0d0a00  
00016a  00                DCB      0
00016b  00                DCB      0
                  |L1.364|
00016c  2a20b0b4          DCB      "* ",176,180,161,176,"3",161,177,207,212,202,190,215,238
000170  a1b033a1
000174  b1cfd4ca
000178  bed7ee  
00017b  bdfcd2bb          DCB      189,252,210,187,184,246,212,194,202,253,190,221,"\r\n",0
00017f  b8f6d4c2
000183  cafdbedd
000187  0d0a00  
00018a  00                DCB      0
00018b  00                DCB      0
                  |L1.396|
00018c  2a20b0b4          DCB      "* ",176,180,161,176,"4",161,177,207,212,202,190,215,238
000190  a1b034a1
000194  b1cfd4ca
000198  bed7ee  
00019b  d0c2b2c9          DCB      208,194,178,201,188,175,181,196,202,253,190,221,"\r\n",0
00019f  bcafb5c4
0001a3  cafdbedd
0001a7  0d0a00  
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L1.428|
0001ac  2a200a0d          DCB      "* \n\r",0
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;39     */
;;;40     int main(void)
000000  f5ad5db6          SUB      sp,sp,#0x16c0
;;;41     {
;;;42     	/*
;;;43     		ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;44     	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM
;;;45     	*/
;;;46     	extern uint16_t adc1, adc2;
;;;47     	extern float volt1, volt2;
;;;48     	extern uint8_t aShowTime[50];
;;;49     	extern RTC_TimeTypeDef  RTC_TimeStructure;
;;;50     	extern RTC_DateTypeDef  RTC_DateStructure;
;;;51     	float a ;
;;;52     	unsigned char A[4],HalfHour[16*6*30+6],buf[16*6*30+6],cmd;
;;;53     	int i=0,j=0,k=0,m=0,n=0;
000004  2500              MOVS     r5,#0
000006  bf00              NOP      
000008  2600              MOVS     r6,#0
00000a  46a8              MOV      r8,r5
00000c  2400              MOVS     r4,#0
;;;54     	bsp_Init();		/* 硬件初始化 */
00000e  f7fffffe          BL       bsp_Init
;;;55     	PrintfLogo();	/* 打印例程信息到串口1 */
000012  f7fffffe          BL       PrintfLogo
;;;56     	bsp_InitSFlash();	/* 初始化SPI 串行Flash */
000016  f7fffffe          BL       bsp_InitSFlash
;;;57     	sf_ReadBuffer(A, 1440 * g_tSF.PageSize, 4);	
00001a  48fe              LDR      r0,|L2.1044|
00001c  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00001e  f44f62b4          MOV      r2,#0x5a0
000022  fb00f102          MUL      r1,r0,r2
000026  2204              MOVS     r2,#4
000028  f24160b8          MOV      r0,#0x16b8
00002c  4468              ADD      r0,r0,sp
00002e  f7fffffe          BL       sf_ReadBuffer
;;;58     	CA2F(A,&a);
000032  f24161bc          MOV      r1,#0x16bc
000036  4469              ADD      r1,r1,sp
000038  1f08              SUBS     r0,r1,#4
00003a  f7fffffe          BL       CA2F
;;;59     	j=a;
00003e  f50d50a0          ADD      r0,sp,#0x1400
000042  ed900aaf          VLDR     s0,[r0,#0x2bc]
000046  eebd0ac0          VCVT.S32.F32 s0,s0
00004a  ee107a10          VMOV     r7,s0
;;;60     	while(1)
00004e  e35e              B        |L2.1806|
                  |L2.80|
;;;61     	{ 
;;;62     		bsp_Idle();
000050  f7fffffe          BL       bsp_Idle
;;;63     		RTC_TimeShow();/*获取当前时间*/
000054  f7fffffe          BL       RTC_TimeShow
;;;64     		
;;;65     		while(RTC_TimeStructure.RTC_Seconds%10!=0)
000058  e003              B        |L2.98|
                  |L2.90|
;;;66     		{
;;;67     			bsp_Idle();
00005a  f7fffffe          BL       bsp_Idle
;;;68     			RTC_TimeShow();
00005e  f7fffffe          BL       RTC_TimeShow
                  |L2.98|
000062  48ed              LDR      r0,|L2.1048|
000064  7880              LDRB     r0,[r0,#2]            ;65  ; RTC_TimeStructure
000066  210a              MOVS     r1,#0xa               ;65
000068  fb90f2f1          SDIV     r2,r0,r1              ;65
00006c  fb010012          MLS      r0,r1,r2,r0           ;65
000070  2800              CMP      r0,#0                 ;65
000072  d1f2              BNE      |L2.90|
;;;69     		}
;;;70     		
;;;71     		/*在页头记录时间*/
;;;72     		if(i==0)
000074  bb0d              CBNZ     r5,|L2.186|
;;;73     		{ RTC_DateShow();
000076  f7fffffe          BL       RTC_DateShow
;;;74     			HalfHour[i++]=RTC_DateStructure.RTC_Year;
00007a  48e8              LDR      r0,|L2.1052|
00007c  78c2              LDRB     r2,[r0,#3]  ; RTC_DateStructure
00007e  4628              MOV      r0,r5
000080  1c6d              ADDS     r5,r5,#1
000082  f50d6137          ADD      r1,sp,#0xb70
000086  540a              STRB     r2,[r1,r0]
;;;75     			HalfHour[i++]=RTC_DateStructure.RTC_Month;
000088  48e4              LDR      r0,|L2.1052|
00008a  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
00008c  4628              MOV      r0,r5
00008e  1c6d              ADDS     r5,r5,#1
000090  540a              STRB     r2,[r1,r0]
;;;76     			HalfHour[i++]=RTC_DateStructure.RTC_Date;
000092  48e2              LDR      r0,|L2.1052|
000094  7882              LDRB     r2,[r0,#2]  ; RTC_DateStructure
000096  4628              MOV      r0,r5
000098  1c6d              ADDS     r5,r5,#1
00009a  540a              STRB     r2,[r1,r0]
;;;77     			HalfHour[i++]=RTC_TimeStructure.RTC_Hours;
00009c  48de              LDR      r0,|L2.1048|
00009e  7802              LDRB     r2,[r0,#0]  ; RTC_TimeStructure
0000a0  4628              MOV      r0,r5
0000a2  1c6d              ADDS     r5,r5,#1
0000a4  540a              STRB     r2,[r1,r0]
;;;78     			HalfHour[i++]=RTC_TimeStructure.RTC_Minutes;
0000a6  48dc              LDR      r0,|L2.1048|
0000a8  7842              LDRB     r2,[r0,#1]  ; RTC_TimeStructure
0000aa  4628              MOV      r0,r5
0000ac  1c6d              ADDS     r5,r5,#1
0000ae  540a              STRB     r2,[r1,r0]
;;;79     			HalfHour[i++]=RTC_TimeStructure.RTC_Seconds;
0000b0  48d9              LDR      r0,|L2.1048|
0000b2  7882              LDRB     r2,[r0,#2]  ; RTC_TimeStructure
0000b4  4628              MOV      r0,r5
0000b6  1c6d              ADDS     r5,r5,#1
0000b8  540a              STRB     r2,[r1,r0]
                  |L2.186|
;;;80     		}
;;;81     		RTC_TimeShow();
0000ba  f7fffffe          BL       RTC_TimeShow
;;;82     		bsp_DelayMS(1000);
0000be  f44f707a          MOV      r0,#0x3e8
0000c2  f7fffffe          BL       bsp_DelayMS
;;;83     		/*采集数据*/
;;;84     		GetAD7705();
0000c6  f7fffffe          BL       GetAD7705
;;;85     		GetBMP085();
0000ca  f7fffffe          BL       GetBMP085
;;;86     		/*数据转换为Flash易存储形式*/
;;;87     		a =volt1;
0000ce  48d4              LDR      r0,|L2.1056|
0000d0  ed900a00          VLDR     s0,[r0,#0]
0000d4  f50d50a0          ADD      r0,sp,#0x1400
0000d8  ed800aaf          VSTR     s0,[r0,#0x2bc]
;;;88     		F2CA(A,a); /*float->charArray*/
0000dc  ed900aaf          VLDR     s0,[r0,#0x2bc]
0000e0  f500702e          ADD      r0,r0,#0x2b8
0000e4  f7fffffe          BL       F2CA
;;;89     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
0000e8  f50d5080          ADD      r0,sp,#0x1000
0000ec  f89036b8          LDRB     r3,[r0,#0x6b8]
0000f0  4629              MOV      r1,r5
0000f2  1c6d              ADDS     r5,r5,#1
0000f4  f50d6037          ADD      r0,sp,#0xb70
0000f8  5443              STRB     r3,[r0,r1]
0000fa  f50d5080          ADD      r0,sp,#0x1000
0000fe  f89036b9          LDRB     r3,[r0,#0x6b9]
000102  4629              MOV      r1,r5
000104  1c6d              ADDS     r5,r5,#1
000106  f50d6037          ADD      r0,sp,#0xb70
00010a  5443              STRB     r3,[r0,r1]
00010c  f50d5080          ADD      r0,sp,#0x1000
000110  f89036ba          LDRB     r3,[r0,#0x6ba]
000114  4629              MOV      r1,r5
000116  1c6d              ADDS     r5,r5,#1
000118  f50d6037          ADD      r0,sp,#0xb70
00011c  5443              STRB     r3,[r0,r1]
00011e  f50d5080          ADD      r0,sp,#0x1000
000122  f89036bb          LDRB     r3,[r0,#0x6bb]
000126  4629              MOV      r1,r5
000128  1c6d              ADDS     r5,r5,#1
00012a  f50d6037          ADD      r0,sp,#0xb70
00012e  5443              STRB     r3,[r0,r1]
;;;90     		a =volt2;
000130  48bc              LDR      r0,|L2.1060|
000132  ed900a00          VLDR     s0,[r0,#0]
000136  f50d50a0          ADD      r0,sp,#0x1400
00013a  ed800aaf          VSTR     s0,[r0,#0x2bc]
;;;91     		F2CA(A,a); /*float->charArray*/
00013e  ed900aaf          VLDR     s0,[r0,#0x2bc]
000142  f500702e          ADD      r0,r0,#0x2b8
000146  f7fffffe          BL       F2CA
;;;92     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
00014a  f50d5080          ADD      r0,sp,#0x1000
00014e  f89036b8          LDRB     r3,[r0,#0x6b8]
000152  4629              MOV      r1,r5
000154  1c6d              ADDS     r5,r5,#1
000156  f50d6037          ADD      r0,sp,#0xb70
00015a  5443              STRB     r3,[r0,r1]
00015c  f50d5080          ADD      r0,sp,#0x1000
000160  f89036b9          LDRB     r3,[r0,#0x6b9]
000164  4629              MOV      r1,r5
000166  1c6d              ADDS     r5,r5,#1
000168  f50d6037          ADD      r0,sp,#0xb70
00016c  5443              STRB     r3,[r0,r1]
00016e  f50d5080          ADD      r0,sp,#0x1000
000172  f89036ba          LDRB     r3,[r0,#0x6ba]
000176  4629              MOV      r1,r5
000178  1c6d              ADDS     r5,r5,#1
00017a  f50d6037          ADD      r0,sp,#0xb70
00017e  5443              STRB     r3,[r0,r1]
000180  f50d5080          ADD      r0,sp,#0x1000
000184  f89036bb          LDRB     r3,[r0,#0x6bb]
000188  4629              MOV      r1,r5
00018a  1c6d              ADDS     r5,r5,#1
00018c  f50d6037          ADD      r0,sp,#0xb70
000190  5443              STRB     r3,[r0,r1]
;;;93     		a =(float)g_tBMP085.Temp;
000192  48a5              LDR      r0,|L2.1064|
000194  ed900a06          VLDR     s0,[r0,#0x18]
000198  eeb80ac0          VCVT.F32.S32 s0,s0
00019c  f50d50a0          ADD      r0,sp,#0x1400
0001a0  ed800aaf          VSTR     s0,[r0,#0x2bc]
;;;94     		F2CA(A,a); /*float->charArray*/
0001a4  ed900aaf          VLDR     s0,[r0,#0x2bc]
0001a8  f500702e          ADD      r0,r0,#0x2b8
0001ac  f7fffffe          BL       F2CA
;;;95     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
0001b0  f50d5080          ADD      r0,sp,#0x1000
0001b4  f89036b8          LDRB     r3,[r0,#0x6b8]
0001b8  4629              MOV      r1,r5
0001ba  1c6d              ADDS     r5,r5,#1
0001bc  f50d6037          ADD      r0,sp,#0xb70
0001c0  5443              STRB     r3,[r0,r1]
0001c2  f50d5080          ADD      r0,sp,#0x1000
0001c6  f89036b9          LDRB     r3,[r0,#0x6b9]
0001ca  4629              MOV      r1,r5
0001cc  1c6d              ADDS     r5,r5,#1
0001ce  f50d6037          ADD      r0,sp,#0xb70
0001d2  5443              STRB     r3,[r0,r1]
0001d4  f50d5080          ADD      r0,sp,#0x1000
0001d8  f89026ba          LDRB     r2,[r0,#0x6ba]
0001dc  4628              MOV      r0,r5
0001de  1c6d              ADDS     r5,r5,#1
0001e0  f50d6137          ADD      r1,sp,#0xb70
0001e4  540a              STRB     r2,[r1,r0]
0001e6  f50d5080          ADD      r0,sp,#0x1000
0001ea  f89026bb          LDRB     r2,[r0,#0x6bb]
0001ee  4628              MOV      r0,r5
0001f0  1c6d              ADDS     r5,r5,#1
0001f2  540a              STRB     r2,[r1,r0]
;;;96     		a =(float)g_tBMP085.Press;
0001f4  488c              LDR      r0,|L2.1064|
0001f6  ed900a07          VLDR     s0,[r0,#0x1c]
0001fa  eeb80ac0          VCVT.F32.S32 s0,s0
0001fe  f50d50a0          ADD      r0,sp,#0x1400
000202  ed800aaf          VSTR     s0,[r0,#0x2bc]
;;;97     		F2CA(A,a); /*float->charArray*/
000206  ed900aaf          VLDR     s0,[r0,#0x2bc]
00020a  f500702e          ADD      r0,r0,#0x2b8
00020e  f7fffffe          BL       F2CA
;;;98     		HalfHour[i++]=A[0];HalfHour[i++]=A[1];HalfHour[i++]=A[2];HalfHour[i++]=A[3];
000212  f50d5080          ADD      r0,sp,#0x1000
000216  f89036b8          LDRB     r3,[r0,#0x6b8]
00021a  4629              MOV      r1,r5
00021c  1c6d              ADDS     r5,r5,#1
00021e  f50d6037          ADD      r0,sp,#0xb70
000222  5443              STRB     r3,[r0,r1]
000224  f50d5080          ADD      r0,sp,#0x1000
000228  f89036b9          LDRB     r3,[r0,#0x6b9]
00022c  4629              MOV      r1,r5
00022e  1c6d              ADDS     r5,r5,#1
000230  f50d6037          ADD      r0,sp,#0xb70
000234  5443              STRB     r3,[r0,r1]
000236  f50d5080          ADD      r0,sp,#0x1000
00023a  f89026ba          LDRB     r2,[r0,#0x6ba]
00023e  4628              MOV      r0,r5
000240  1c6d              ADDS     r5,r5,#1
000242  f50d6137          ADD      r1,sp,#0xb70
000246  540a              STRB     r2,[r1,r0]
000248  f50d5080          ADD      r0,sp,#0x1000
00024c  f89026bb          LDRB     r2,[r0,#0x6bb]
000250  4628              MOV      r0,r5
000252  1c6d              ADDS     r5,r5,#1
000254  540a              STRB     r2,[r1,r0]
;;;99     		
;;;100    		
;;;101    		
;;;102    //		/*运行状态记录*/
;;;103    //		printf(" %d %d %d %d %2d %2d     ",
;;;104    //					RTC_DateStructure.RTC_Year,
;;;105    //					RTC_DateStructure.RTC_Month,
;;;106    //					RTC_DateStructure.RTC_Date,
;;;107    //					RTC_TimeStructure.RTC_Hours,
;;;108    //					RTC_TimeStructure.RTC_Minutes,
;;;109    //					RTC_TimeStructure.RTC_Seconds);
;;;110    //		printf("%d\r\n",i);
;;;111    		
;;;112    		
;;;113    		
;;;114    		
;;;115    		
;;;116    		/*判断是否需要相应上位机*/
;;;117    		if (comGetChar(COM1, &cmd))	/* 从串口读入一个字符(非阻塞方式) */
000256  a909              ADD      r1,sp,#0x24
000258  2000              MOVS     r0,#0
00025a  f7fffffe          BL       comGetChar
00025e  2800              CMP      r0,#0
000260  d07d              BEQ      |L2.862|
;;;118    		{
;;;119    			switch (cmd)
000262  f89d0024          LDRB     r0,[sp,#0x24]
000266  2831              CMP      r0,#0x31
000268  d006              BEQ      |L2.632|
00026a  2832              CMP      r0,#0x32
00026c  d078              BEQ      |L2.864|
00026e  2833              CMP      r0,#0x33
000270  d077              BEQ      |L2.866|
000272  2834              CMP      r0,#0x34
000274  d176              BNE      |L2.868|
000276  e1e4              B        |L2.1602|
                  |L2.632|
;;;120    			{
;;;121    				case '1':
;;;122    					/*输出SPI Flash中的数据*/
;;;123    					for(k=j-47;k<j;k++)
000278  f1a7062f          SUB      r6,r7,#0x2f
00027c  e045              B        |L2.778|
                  |L2.638|
;;;124    					{
;;;125    						/*解决k小于0的问题*/
;;;126    						if(k>=0)
00027e  2e00              CMP      r6,#0
000280  db01              BLT      |L2.646|
;;;127    							m=k;
000282  46b0              MOV      r8,r6
000284  e001              B        |L2.650|
                  |L2.646|
;;;128    						else
;;;129    							m=2*24*30+k;
000286  f50668b4          ADD      r8,r6,#0x5a0
                  |L2.650|
;;;130    						/*输出 n*半小时 前 测量数据*/
;;;131    						bsp_InitSFlash();	/* 初始化SPI 串行Flash */
00028a  f7fffffe          BL       bsp_InitSFlash
;;;132    						sf_ReadBuffer(buf, m * g_tSF.PageSize+i-16, 16);	
00028e  4861              LDR      r0,|L2.1044|
000290  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000292  fb085000          MLA      r0,r8,r0,r5
000296  f1a00110          SUB      r1,r0,#0x10
00029a  2210              MOVS     r2,#0x10
00029c  a80a              ADD      r0,sp,#0x28
00029e  f7fffffe          BL       sf_ReadBuffer
;;;133    						for(n=0;n<16;n=n+4)
0002a2  2400              MOVS     r4,#0
0002a4  e02b              B        |L2.766|
                  |L2.678|
;;;134    						{
;;;135    							A[0]=buf[n];
0002a6  a90a              ADD      r1,sp,#0x28
0002a8  5d09              LDRB     r1,[r1,r4]
0002aa  f50d5080          ADD      r0,sp,#0x1000
0002ae  f88016b8          STRB     r1,[r0,#0x6b8]
;;;136    							A[1]=buf[n+1];
0002b2  a90a              ADD      r1,sp,#0x28
0002b4  1c60              ADDS     r0,r4,#1
0002b6  5c09              LDRB     r1,[r1,r0]
0002b8  f50d5080          ADD      r0,sp,#0x1000
0002bc  f88016b9          STRB     r1,[r0,#0x6b9]
;;;137    							A[2]=buf[n+2];
0002c0  a90a              ADD      r1,sp,#0x28
0002c2  1ca0              ADDS     r0,r4,#2
0002c4  5c09              LDRB     r1,[r1,r0]
0002c6  f50d5080          ADD      r0,sp,#0x1000
0002ca  f88016ba          STRB     r1,[r0,#0x6ba]
;;;138    							A[3]=buf[n+3];
0002ce  a90a              ADD      r1,sp,#0x28
0002d0  1ce0              ADDS     r0,r4,#3
0002d2  5c09              LDRB     r1,[r1,r0]
0002d4  f50d5080          ADD      r0,sp,#0x1000
0002d8  f88016bb          STRB     r1,[r0,#0x6bb]
;;;139    							CA2F(A,&a);
0002dc  f20061bc          ADD      r1,r0,#0x6bc
0002e0  1f08              SUBS     r0,r1,#4
0002e2  f7fffffe          BL       CA2F
;;;140    							printf("%d,",(int)a);
0002e6  f50d50a0          ADD      r0,sp,#0x1400
0002ea  ed900aaf          VLDR     s0,[r0,#0x2bc]
0002ee  eebd0ac0          VCVT.S32.F32 s0,s0
0002f2  ee101a10          VMOV     r1,s0
0002f6  a04d              ADR      r0,|L2.1068|
0002f8  f7fffffe          BL       __2printf
0002fc  1d24              ADDS     r4,r4,#4              ;133
                  |L2.766|
0002fe  2c10              CMP      r4,#0x10              ;133
000300  dbd1              BLT      |L2.678|
;;;141    						}
;;;142    						printf("\r\n");
000302  a04b              ADR      r0,|L2.1072|
000304  f7fffffe          BL       __2printf
000308  1c76              ADDS     r6,r6,#1              ;123
                  |L2.778|
00030a  42be              CMP      r6,r7                 ;123
00030c  dbb7              BLT      |L2.638|
;;;143    						
;;;144    					}
;;;145    					/*打印最新采集到的数据*/
;;;146    					for(n=i-16;n<i;n=n+4)
00030e  f1a50410          SUB      r4,r5,#0x10
000312  e034              B        |L2.894|
                  |L2.788|
;;;147    						{
;;;148    							A[0]=HalfHour[n];
000314  f50d6137          ADD      r1,sp,#0xb70
000318  5d09              LDRB     r1,[r1,r4]
00031a  f50d5080          ADD      r0,sp,#0x1000
00031e  f88016b8          STRB     r1,[r0,#0x6b8]
;;;149    							A[1]=HalfHour[n+1];
000322  f50d6137          ADD      r1,sp,#0xb70
000326  1c60              ADDS     r0,r4,#1
000328  5c09              LDRB     r1,[r1,r0]
00032a  f50d5080          ADD      r0,sp,#0x1000
00032e  f88016b9          STRB     r1,[r0,#0x6b9]
;;;150    							A[2]=HalfHour[n+2];
000332  f50d6137          ADD      r1,sp,#0xb70
000336  1ca0              ADDS     r0,r4,#2
000338  5c09              LDRB     r1,[r1,r0]
00033a  f50d5080          ADD      r0,sp,#0x1000
00033e  f88016ba          STRB     r1,[r0,#0x6ba]
;;;151    							A[3]=HalfHour[n+3];
000342  f50d6137          ADD      r1,sp,#0xb70
000346  1ce0              ADDS     r0,r4,#3
000348  5c09              LDRB     r1,[r1,r0]
00034a  f50d5080          ADD      r0,sp,#0x1000
00034e  f88016bb          STRB     r1,[r0,#0x6bb]
;;;152    							CA2F(A,&a);
000352  f20061bc          ADD      r1,r0,#0x6bc
000356  1f08              SUBS     r0,r1,#4
000358  f7fffffe          BL       CA2F
;;;153    							printf("%d,",(int)a);
00035c  e003              B        |L2.870|
                  |L2.862|
00035e  e19e              B        |L2.1694|
                  |L2.864|
000360  e023              B        |L2.938|
                  |L2.866|
000362  e0d5              B        |L2.1296|
                  |L2.868|
000364  e196              B        |L2.1684|
                  |L2.870|
000366  f50d50a0          ADD      r0,sp,#0x1400
00036a  ed900aaf          VLDR     s0,[r0,#0x2bc]
00036e  eebd0ac0          VCVT.S32.F32 s0,s0
000372  ee101a10          VMOV     r1,s0
000376  a02d              ADR      r0,|L2.1068|
000378  f7fffffe          BL       __2printf
00037c  1d24              ADDS     r4,r4,#4              ;146
                  |L2.894|
00037e  42ac              CMP      r4,r5                 ;146
000380  dbc8              BLT      |L2.788|
;;;154    						}
;;;155    					printf("\r\n");
000382  a02b              ADR      r0,|L2.1072|
000384  f7fffffe          BL       __2printf
;;;156    					/*打印当前时间*/
;;;157    					printf("%d,%d,%d,%d,%d,%d\r\n",
000388  4823              LDR      r0,|L2.1048|
00038a  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
00038c  4922              LDR      r1,|L2.1048|
00038e  7849              LDRB     r1,[r1,#1]  ; RTC_TimeStructure
000390  4a21              LDR      r2,|L2.1048|
000392  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
000394  e9cd2100          STRD     r2,r1,[sp,#0]
000398  9002              STR      r0,[sp,#8]
00039a  4820              LDR      r0,|L2.1052|
00039c  7883              LDRB     r3,[r0,#2]  ; RTC_DateStructure
00039e  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
0003a0  78c1              LDRB     r1,[r0,#3]  ; RTC_DateStructure
0003a2  a024              ADR      r0,|L2.1076|
0003a4  f7fffffe          BL       __2printf
;;;158    					RTC_DateStructure.RTC_Year,
;;;159    					RTC_DateStructure.RTC_Month,
;;;160    					RTC_DateStructure.RTC_Date,
;;;161    					RTC_TimeStructure.RTC_Hours,
;;;162    					RTC_TimeStructure.RTC_Minutes,
;;;163    					RTC_TimeStructure.RTC_Seconds);
;;;164    					break;
0003a8  e178              B        |L2.1692|
                  |L2.938|
;;;165    						
;;;166    				case '2':
;;;167    					/*输出SPI Flash中的数据*/
;;;168    					for(k=j-335;k<j;k++)
0003aa  f2a7164f          SUB      r6,r7,#0x14f
0003ae  e062              B        |L2.1142|
                  |L2.944|
;;;169    					{
;;;170    						/*解决k小于0的问题*/
;;;171    						if(k>=0)
0003b0  2e00              CMP      r6,#0
0003b2  db01              BLT      |L2.952|
;;;172    							m=k;
0003b4  46b0              MOV      r8,r6
0003b6  e001              B        |L2.956|
                  |L2.952|
;;;173    						else
;;;174    							m=2*24*30+k;
0003b8  f50668b4          ADD      r8,r6,#0x5a0
                  |L2.956|
;;;175    						/*输出 n*半小时 前 测量数据*/
;;;176    						bsp_InitSFlash();	/* 初始化SPI 串行Flash */
0003bc  f7fffffe          BL       bsp_InitSFlash
;;;177    						sf_ReadBuffer(buf, m * g_tSF.PageSize+i-16, 16);	
0003c0  4814              LDR      r0,|L2.1044|
0003c2  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
0003c4  fb085000          MLA      r0,r8,r0,r5
0003c8  f1a00110          SUB      r1,r0,#0x10
0003cc  2210              MOVS     r2,#0x10
0003ce  a80a              ADD      r0,sp,#0x28
0003d0  f7fffffe          BL       sf_ReadBuffer
;;;178    						for(n=0;n<16;n=n+4)
0003d4  2400              MOVS     r4,#0
0003d6  e047              B        |L2.1128|
                  |L2.984|
;;;179    						{
;;;180    							A[0]=buf[n];
0003d8  a90a              ADD      r1,sp,#0x28
0003da  5d09              LDRB     r1,[r1,r4]
0003dc  f50d5080          ADD      r0,sp,#0x1000
0003e0  f88016b8          STRB     r1,[r0,#0x6b8]
;;;181    							A[1]=buf[n+1];
0003e4  a90a              ADD      r1,sp,#0x28
0003e6  1c60              ADDS     r0,r4,#1
0003e8  5c09              LDRB     r1,[r1,r0]
0003ea  f50d5080          ADD      r0,sp,#0x1000
0003ee  f88016b9          STRB     r1,[r0,#0x6b9]
;;;182    							A[2]=buf[n+2];
0003f2  a90a              ADD      r1,sp,#0x28
0003f4  1ca0              ADDS     r0,r4,#2
0003f6  5c09              LDRB     r1,[r1,r0]
0003f8  f50d5080          ADD      r0,sp,#0x1000
0003fc  f88016ba          STRB     r1,[r0,#0x6ba]
;;;183    							A[3]=buf[n+3];
000400  a90a              ADD      r1,sp,#0x28
000402  1ce0              ADDS     r0,r4,#3
000404  5c09              LDRB     r1,[r1,r0]
000406  f50d5080          ADD      r0,sp,#0x1000
00040a  f88016bb          STRB     r1,[r0,#0x6bb]
;;;184    							CA2F(A,&a);
00040e  f20061bc          ADD      r1,r0,#0x6bc
000412  e019              B        |L2.1096|
                  |L2.1044|
                          DCD      g_tSF
                  |L2.1048|
                          DCD      RTC_TimeStructure
                  |L2.1052|
                          DCD      RTC_DateStructure
                  |L2.1056|
                          DCD      volt1
                  |L2.1060|
                          DCD      volt2
                  |L2.1064|
                          DCD      g_tBMP085
                  |L2.1068|
00042c  25642c00          DCB      "%d,",0
                  |L2.1072|
000430  0d0a00            DCB      "\r\n",0
000433  00                DCB      0
                  |L2.1076|
000434  25642c25          DCB      "%d,%d,%d,%d,%d,%d\r\n",0
000438  642c2564
00043c  2c25642c
000440  25642c25
000444  640d0a00
                  |L2.1096|
000448  1f08              SUBS     r0,r1,#4
00044a  f7fffffe          BL       CA2F
;;;185    							printf("%d,",(int)a);
00044e  f50d50a0          ADD      r0,sp,#0x1400
000452  ed900aaf          VLDR     s0,[r0,#0x2bc]
000456  eebd0ac0          VCVT.S32.F32 s0,s0
00045a  ee101a10          VMOV     r1,s0
00045e  f2af0034          ADR      r0,|L2.1068|
000462  f7fffffe          BL       __2printf
000466  1d24              ADDS     r4,r4,#4              ;178
                  |L2.1128|
000468  2c10              CMP      r4,#0x10              ;178
00046a  dbb5              BLT      |L2.984|
;;;186    						}
;;;187    						printf("\r\n");
00046c  f2af0040          ADR      r0,|L2.1072|
000470  f7fffffe          BL       __2printf
000474  1c76              ADDS     r6,r6,#1              ;168
                  |L2.1142|
000476  42be              CMP      r6,r7                 ;168
000478  db9a              BLT      |L2.944|
;;;188    						
;;;189    					}
;;;190    					/*打印最新采集到的数据*/
;;;191    					for(n=i-16;n<i;n=n+4)
00047a  f1a50410          SUB      r4,r5,#0x10
00047e  e030              B        |L2.1250|
                  |L2.1152|
;;;192    						{
;;;193    							A[0]=HalfHour[n];
000480  f50d6137          ADD      r1,sp,#0xb70
000484  5d09              LDRB     r1,[r1,r4]
000486  f50d5080          ADD      r0,sp,#0x1000
00048a  f88016b8          STRB     r1,[r0,#0x6b8]
;;;194    							A[1]=HalfHour[n+1];
00048e  f50d6137          ADD      r1,sp,#0xb70
000492  1c60              ADDS     r0,r4,#1
000494  5c09              LDRB     r1,[r1,r0]
000496  f50d5080          ADD      r0,sp,#0x1000
00049a  f88016b9          STRB     r1,[r0,#0x6b9]
;;;195    							A[2]=HalfHour[n+2];
00049e  f50d6137          ADD      r1,sp,#0xb70
0004a2  1ca0              ADDS     r0,r4,#2
0004a4  5c09              LDRB     r1,[r1,r0]
0004a6  f50d5080          ADD      r0,sp,#0x1000
0004aa  f88016ba          STRB     r1,[r0,#0x6ba]
;;;196    							A[3]=HalfHour[n+3];
0004ae  f50d6137          ADD      r1,sp,#0xb70
0004b2  1ce0              ADDS     r0,r4,#3
0004b4  5c09              LDRB     r1,[r1,r0]
0004b6  f50d5080          ADD      r0,sp,#0x1000
0004ba  f88016bb          STRB     r1,[r0,#0x6bb]
;;;197    							CA2F(A,&a);
0004be  f20061bc          ADD      r1,r0,#0x6bc
0004c2  1f08              SUBS     r0,r1,#4
0004c4  f7fffffe          BL       CA2F
;;;198    							printf("%d,",(int)a);
0004c8  f50d50a0          ADD      r0,sp,#0x1400
0004cc  ed900aaf          VLDR     s0,[r0,#0x2bc]
0004d0  eebd0ac0          VCVT.S32.F32 s0,s0
0004d4  ee101a10          VMOV     r1,s0
0004d8  f2af00b0          ADR      r0,|L2.1068|
0004dc  f7fffffe          BL       __2printf
0004e0  1d24              ADDS     r4,r4,#4              ;191
                  |L2.1250|
0004e2  42ac              CMP      r4,r5                 ;191
0004e4  dbcc              BLT      |L2.1152|
;;;199    						}
;;;200    					printf("\r\n");
0004e6  f2af00b8          ADR      r0,|L2.1072|
0004ea  f7fffffe          BL       __2printf
;;;201    					/*打印当前时间*/
;;;202    					printf("%d,%d,%d,%d,%d,%d\r\n",
0004ee  4888              LDR      r0,|L2.1808|
0004f0  7881              LDRB     r1,[r0,#2]  ; RTC_TimeStructure
0004f2  7840              LDRB     r0,[r0,#1]  ; RTC_TimeStructure
0004f4  4a86              LDR      r2,|L2.1808|
0004f6  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
0004f8  e9cd2000          STRD     r2,r0,[sp,#0]
0004fc  9102              STR      r1,[sp,#8]
0004fe  4885              LDR      r0,|L2.1812|
000500  7883              LDRB     r3,[r0,#2]  ; RTC_DateStructure
000502  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
000504  78c1              LDRB     r1,[r0,#3]  ; RTC_DateStructure
000506  f2af00d4          ADR      r0,|L2.1076|
00050a  f7fffffe          BL       __2printf
;;;203    					RTC_DateStructure.RTC_Year,
;;;204    					RTC_DateStructure.RTC_Month,
;;;205    					RTC_DateStructure.RTC_Date,
;;;206    					RTC_TimeStructure.RTC_Hours,
;;;207    					RTC_TimeStructure.RTC_Minutes,
;;;208    					RTC_TimeStructure.RTC_Seconds);
;;;209    					break;
00050e  e0c5              B        |L2.1692|
                  |L2.1296|
;;;210    						
;;;211    			case '3':
;;;212    					/*输出SPI Flash中的数据*/
;;;213    					for(k=j-1439;k<j;k++)
000510  f2a7569f          SUB      r6,r7,#0x59f
000514  e047              B        |L2.1446|
                  |L2.1302|
;;;214    					{
;;;215    						/*解决k小于0的问题*/
;;;216    						if(k>=0)
000516  2e00              CMP      r6,#0
000518  db01              BLT      |L2.1310|
;;;217    							m=k;
00051a  46b0              MOV      r8,r6
00051c  e001              B        |L2.1314|
                  |L2.1310|
;;;218    						else
;;;219    							m=2*24*30+k;
00051e  f50668b4          ADD      r8,r6,#0x5a0
                  |L2.1314|
;;;220    						/*输出 n*半小时 前 测量数据*/
;;;221    						bsp_InitSFlash();	/* 初始化SPI 串行Flash */
000522  f7fffffe          BL       bsp_InitSFlash
;;;222    						sf_ReadBuffer(buf, m * g_tSF.PageSize+i-16, 16);	
000526  487c              LDR      r0,|L2.1816|
000528  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00052a  fb085000          MLA      r0,r8,r0,r5
00052e  f1a00110          SUB      r1,r0,#0x10
000532  2210              MOVS     r2,#0x10
000534  a80a              ADD      r0,sp,#0x28
000536  f7fffffe          BL       sf_ReadBuffer
;;;223    						for(n=0;n<16;n=n+4)
00053a  2400              MOVS     r4,#0
00053c  e02c              B        |L2.1432|
                  |L2.1342|
;;;224    						{
;;;225    							A[0]=buf[n];
00053e  a90a              ADD      r1,sp,#0x28
000540  5d09              LDRB     r1,[r1,r4]
000542  f50d5080          ADD      r0,sp,#0x1000
000546  f88016b8          STRB     r1,[r0,#0x6b8]
;;;226    							A[1]=buf[n+1];
00054a  a90a              ADD      r1,sp,#0x28
00054c  1c60              ADDS     r0,r4,#1
00054e  5c09              LDRB     r1,[r1,r0]
000550  f50d5080          ADD      r0,sp,#0x1000
000554  f88016b9          STRB     r1,[r0,#0x6b9]
;;;227    							A[2]=buf[n+2];
000558  a90a              ADD      r1,sp,#0x28
00055a  1ca0              ADDS     r0,r4,#2
00055c  5c09              LDRB     r1,[r1,r0]
00055e  f50d5080          ADD      r0,sp,#0x1000
000562  f88016ba          STRB     r1,[r0,#0x6ba]
;;;228    							A[3]=buf[n+3];
000566  a90a              ADD      r1,sp,#0x28
000568  1ce0              ADDS     r0,r4,#3
00056a  5c09              LDRB     r1,[r1,r0]
00056c  f50d5080          ADD      r0,sp,#0x1000
000570  f88016bb          STRB     r1,[r0,#0x6bb]
;;;229    							CA2F(A,&a);
000574  f20061bc          ADD      r1,r0,#0x6bc
000578  1f08              SUBS     r0,r1,#4
00057a  f7fffffe          BL       CA2F
;;;230    							printf("%d,",(int)a);
00057e  f50d50a0          ADD      r0,sp,#0x1400
000582  ed900aaf          VLDR     s0,[r0,#0x2bc]
000586  eebd0ac0          VCVT.S32.F32 s0,s0
00058a  ee101a10          VMOV     r1,s0
00058e  f2af1064          ADR      r0,|L2.1068|
000592  f7fffffe          BL       __2printf
000596  1d24              ADDS     r4,r4,#4              ;223
                  |L2.1432|
000598  2c10              CMP      r4,#0x10              ;223
00059a  dbd0              BLT      |L2.1342|
;;;231    						}
;;;232    						printf("\r\n");
00059c  f2af1070          ADR      r0,|L2.1072|
0005a0  f7fffffe          BL       __2printf
0005a4  1c76              ADDS     r6,r6,#1              ;213
                  |L2.1446|
0005a6  42be              CMP      r6,r7                 ;213
0005a8  dbb5              BLT      |L2.1302|
;;;233    						
;;;234    					}
;;;235    					/*打印最新采集到的数据*/
;;;236    					for(n=i-16;n<i;n=n+4)
0005aa  f1a50410          SUB      r4,r5,#0x10
0005ae  e030              B        |L2.1554|
                  |L2.1456|
;;;237    						{
;;;238    							A[0]=HalfHour[n];
0005b0  f50d6137          ADD      r1,sp,#0xb70
0005b4  5d09              LDRB     r1,[r1,r4]
0005b6  f50d5080          ADD      r0,sp,#0x1000
0005ba  f88016b8          STRB     r1,[r0,#0x6b8]
;;;239    							A[1]=HalfHour[n+1];
0005be  f50d6137          ADD      r1,sp,#0xb70
0005c2  1c60              ADDS     r0,r4,#1
0005c4  5c09              LDRB     r1,[r1,r0]
0005c6  f50d5080          ADD      r0,sp,#0x1000
0005ca  f88016b9          STRB     r1,[r0,#0x6b9]
;;;240    							A[2]=HalfHour[n+2];
0005ce  f50d6137          ADD      r1,sp,#0xb70
0005d2  1ca0              ADDS     r0,r4,#2
0005d4  5c09              LDRB     r1,[r1,r0]
0005d6  f50d5080          ADD      r0,sp,#0x1000
0005da  f88016ba          STRB     r1,[r0,#0x6ba]
;;;241    							A[3]=HalfHour[n+3];
0005de  f50d6137          ADD      r1,sp,#0xb70
0005e2  1ce0              ADDS     r0,r4,#3
0005e4  5c09              LDRB     r1,[r1,r0]
0005e6  f50d5080          ADD      r0,sp,#0x1000
0005ea  f88016bb          STRB     r1,[r0,#0x6bb]
;;;242    							CA2F(A,&a);
0005ee  f20061bc          ADD      r1,r0,#0x6bc
0005f2  1f08              SUBS     r0,r1,#4
0005f4  f7fffffe          BL       CA2F
;;;243    							printf("%d,",(int)a);
0005f8  f50d50a0          ADD      r0,sp,#0x1400
0005fc  ed900aaf          VLDR     s0,[r0,#0x2bc]
000600  eebd0ac0          VCVT.S32.F32 s0,s0
000604  ee101a10          VMOV     r1,s0
000608  f2af10e0          ADR      r0,|L2.1068|
00060c  f7fffffe          BL       __2printf
000610  1d24              ADDS     r4,r4,#4              ;236
                  |L2.1554|
000612  42ac              CMP      r4,r5                 ;236
000614  dbcc              BLT      |L2.1456|
;;;244    						}
;;;245    					printf("\r\n");
000616  f2af10e8          ADR      r0,|L2.1072|
00061a  f7fffffe          BL       __2printf
;;;246    					/*打印当前时间*/
;;;247    					printf("%d,%d,%d,%d,%d,%d\r\n",
00061e  483c              LDR      r0,|L2.1808|
000620  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
000622  493b              LDR      r1,|L2.1808|
000624  7849              LDRB     r1,[r1,#1]  ; RTC_TimeStructure
000626  4a3a              LDR      r2,|L2.1808|
000628  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
00062a  e9cd2100          STRD     r2,r1,[sp,#0]
00062e  9002              STR      r0,[sp,#8]
000630  4838              LDR      r0,|L2.1812|
000632  7883              LDRB     r3,[r0,#2]  ; RTC_DateStructure
000634  7842              LDRB     r2,[r0,#1]  ; RTC_DateStructure
000636  78c1              LDRB     r1,[r0,#3]  ; RTC_DateStructure
000638  f2af2008          ADR      r0,|L2.1076|
00063c  f7fffffe          BL       __2printf
;;;248    					RTC_DateStructure.RTC_Year,
;;;249    					RTC_DateStructure.RTC_Month,
;;;250    					RTC_DateStructure.RTC_Date,
;;;251    					RTC_TimeStructure.RTC_Hours,
;;;252    					RTC_TimeStructure.RTC_Minutes,
;;;253    					RTC_TimeStructure.RTC_Seconds);
;;;254    					break;
000640  e02c              B        |L2.1692|
                  |L2.1602|
;;;255    
;;;256    			case '4':
;;;257    					printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d \r\n",
000642  4833              LDR      r0,|L2.1808|
000644  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
000646  4932              LDR      r1,|L2.1808|
000648  7849              LDRB     r1,[r1,#1]  ; RTC_TimeStructure
00064a  4a31              LDR      r2,|L2.1808|
00064c  7812              LDRB     r2,[r2,#0]  ; RTC_TimeStructure
00064e  4b31              LDR      r3,|L2.1812|
000650  789b              LDRB     r3,[r3,#2]  ; RTC_DateStructure
000652  e9cd3203          STRD     r3,r2,[sp,#0xc]
000656  e9cd1005          STRD     r1,r0,[sp,#0x14]
00065a  482e              LDR      r0,|L2.1812|
00065c  7840              LDRB     r0,[r0,#1]  ; RTC_DateStructure
00065e  492d              LDR      r1,|L2.1812|
000660  78c9              LDRB     r1,[r1,#3]  ; RTC_DateStructure
000662  4a2e              LDR      r2,|L2.1820|
000664  69d2              LDR      r2,[r2,#0x1c]  ; g_tBMP085
000666  e9cd2100          STRD     r2,r1,[sp,#0]
00066a  9002              STR      r0,[sp,#8]
00066c  482b              LDR      r0,|L2.1820|
00066e  6983              LDR      r3,[r0,#0x18]  ; g_tBMP085
000670  482b              LDR      r0,|L2.1824|
000672  ed900a00          VLDR     s0,[r0,#0]
000676  eebd0ac0          VCVT.S32.F32 s0,s0
00067a  ee102a10          VMOV     r2,s0
00067e  4829              LDR      r0,|L2.1828|
000680  ed900a00          VLDR     s0,[r0,#0]
000684  eebd0ac0          VCVT.S32.F32 s0,s0
000688  ee101a10          VMOV     r1,s0
00068c  a026              ADR      r0,|L2.1832|
00068e  f7fffffe          BL       __2printf
;;;258    					(int)volt1,(int)volt2,g_tBMP085.Temp,g_tBMP085.Press,
;;;259    					RTC_DateStructure.RTC_Year,
;;;260    					RTC_DateStructure.RTC_Month,
;;;261    					RTC_DateStructure.RTC_Date,
;;;262    					RTC_TimeStructure.RTC_Hours,
;;;263    					RTC_TimeStructure.RTC_Minutes,
;;;264    					RTC_TimeStructure.RTC_Seconds);
;;;265    					break;
000692  e003              B        |L2.1692|
                  |L2.1684|
;;;266    						
;;;267    				default:
;;;268    					printf("Wrong");	/* 无效命令，重新打印命令提示 */
000694  a02d              ADR      r0,|L2.1868|
000696  f7fffffe          BL       __2printf
;;;269    					break;
00069a  bf00              NOP      
                  |L2.1692|
00069c  bf00              NOP                            ;164
                  |L2.1694|
;;;270    
;;;271    			}
;;;272    		}
;;;273    		/*半小时数据采集完成*/
;;;274    		/* 在j页中写入半小时的数据 */
;;;275    		if(i==16*6*30+6)
00069e  f5a56030          SUB      r0,r5,#0xb00
0006a2  3846              SUBS     r0,r0,#0x46
0006a4  d133              BNE      |L2.1806|
;;;276    		{
;;;277    			i=0;
0006a6  2500              MOVS     r5,#0
;;;278    			bsp_InitSFlash();
0006a8  f7fffffe          BL       bsp_InitSFlash
;;;279    			if (sf_WriteBuffer(HalfHour, j * g_tSF.PageSize, 16*6*30+6) == 0)
0006ac  481a              LDR      r0,|L2.1816|
0006ae  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
0006b0  fb00f107          MUL      r1,r0,r7
0006b4  f6403246          MOV      r2,#0xb46
0006b8  f50d6037          ADD      r0,sp,#0xb70
0006bc  f7fffffe          BL       sf_WriteBuffer
0006c0  b910              CBNZ     r0,|L2.1736|
;;;280    			{
;;;281    				printf("写串行Flash出错！\r\n");
0006c2  a024              ADR      r0,|L2.1876|
0006c4  f7fffffe          BL       __2printf
                  |L2.1736|
;;;282    			}
;;;283    			j++;
0006c8  1c7f              ADDS     r7,r7,#1
;;;284    			/*判断是否超出存储空间,超出复位0*/
;;;285    			if(j==2*24*30)
0006ca  f5b76fb4          CMP      r7,#0x5a0
0006ce  d100              BNE      |L2.1746|
;;;286    			{
;;;287    				j=0;
0006d0  2700              MOVS     r7,#0
                  |L2.1746|
;;;288    			}
;;;289    			a=j;
0006d2  ee007a10          VMOV     s0,r7
0006d6  eeb80ac0          VCVT.F32.S32 s0,s0
0006da  f50d50a0          ADD      r0,sp,#0x1400
0006de  ed800aaf          VSTR     s0,[r0,#0x2bc]
;;;290    		  F2CA(A,a); /*float->charArray*/
0006e2  ed900aaf          VLDR     s0,[r0,#0x2bc]
0006e6  f500702e          ADD      r0,r0,#0x2b8
0006ea  f7fffffe          BL       F2CA
;;;291    		  if (sf_WriteBuffer(A, 1440* g_tSF.PageSize,4) == 0)
0006ee  480a              LDR      r0,|L2.1816|
0006f0  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
0006f2  f44f62b4          MOV      r2,#0x5a0
0006f6  fb00f102          MUL      r1,r0,r2
0006fa  2204              MOVS     r2,#4
0006fc  f24160b8          MOV      r0,#0x16b8
000700  4468              ADD      r0,r0,sp
000702  f7fffffe          BL       sf_WriteBuffer
000706  b910              CBNZ     r0,|L2.1806|
;;;292    			{
;;;293    				printf("写串行Flash出错！\r\n");
000708  a012              ADR      r0,|L2.1876|
00070a  f7fffffe          BL       __2printf
                  |L2.1806|
00070e  e49f              B        |L2.80|
;;;294    			}
;;;295    			
;;;296    		
;;;297    		}
;;;298    	}
;;;299    }
;;;300    
                          ENDP

                  |L2.1808|
                          DCD      RTC_TimeStructure
                  |L2.1812|
                          DCD      RTC_DateStructure
                  |L2.1816|
                          DCD      g_tSF
                  |L2.1820|
                          DCD      g_tBMP085
                  |L2.1824|
                          DCD      volt2
                  |L2.1828|
                          DCD      volt1
                  |L2.1832|
000728  25642c25          DCB      "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d \r\n",0
00072c  642c2564
000730  2c25642c
000734  25642c25
000738  642c2564
00073c  2c25642c
000740  25642c25
000744  64200d0a
000748  00      
000749  00                DCB      0
00074a  00                DCB      0
00074b  00                DCB      0
                  |L2.1868|
00074c  57726f6e          DCB      "Wrong",0
000750  6700    
000752  00                DCB      0
000753  00                DCB      0
                  |L2.1876|
000754  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,246,180,237,163,161,"\r"
000758  d0d0466c
00075c  617368b3
000760  f6b4eda3
000764  a10d    
000766  0a00              DCB      "\n",0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
