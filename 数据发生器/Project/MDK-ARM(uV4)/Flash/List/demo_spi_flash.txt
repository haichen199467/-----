; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\demo_spi_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\demo_spi_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\demo_spi_flash.crf ..\..\User\demo_spi_flash.c]
                          THUMB

                          AREA ||i.CA2F||, CODE, READONLY, ALIGN=1

                  CA2F PROC
;;;430    */
;;;431    void CA2F(unsigned char * charArray,float* floatVariable)
000000  b530              PUSH     {r4,r5,lr}
;;;432    {	
000002  4602              MOV      r2,r0
;;;433    unsigned char  i;   
;;;434    void   *pf;       
;;;435    unsigned char* px = charArray;    
000004  4614              MOV      r4,r2
;;;436    pf = floatVariable;  
000006  460b              MOV      r3,r1
;;;437    	
;;;438    for(i=0;i<4;i++)  
000008  2000              MOVS     r0,#0
00000a  e003              B        |L1.20|
                  |L1.12|
;;;439    {  
;;;440        *((unsigned char*)pf+i)=*(px+i);       
00000c  5c25              LDRB     r5,[r4,r0]
00000e  541d              STRB     r5,[r3,r0]
000010  1c45              ADDS     r5,r0,#1              ;438
000012  b2e8              UXTB     r0,r5                 ;438
                  |L1.20|
000014  2804              CMP      r0,#4                 ;438
000016  dbf9              BLT      |L1.12|
;;;441    }   
;;;442    
;;;443    
;;;444    }
000018  bd30              POP      {r4,r5,pc}
;;;445    /***************************** Hayden end *********************************/
                          ENDP


                          AREA ||i.DemoSpiFlash||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DemoSpiFlash PROC
;;;42     */
;;;43     void DemoSpiFlash(void)
000000  b508              PUSH     {r3,lr}
;;;44     {
;;;45     	uint8_t cmd;
;;;46     	uint32_t uiReadPageNo = 0;
000002  2400              MOVS     r4,#0
;;;47       bsp_InitSFlash();	/* 初始化SPI 串行Flash */
000004  f7fffffe          BL       bsp_InitSFlash
;;;48     	/* 检测串行Flash OK */
;;;49     	printf("检测到串行Flash, ID = %08X, 型号: %s \r\n", g_tSF.ChipID , g_tSF.ChipName);
000008  484f              LDR      r0,|L2.328|
00000a  1d02              ADDS     r2,r0,#4
00000c  6801              LDR      r1,[r0,#0]  ; g_tSF
00000e  a04f              ADR      r0,|L2.332|
000010  f7fffffe          BL       __2printf
;;;50     	printf("    容量 : %dM字节, 扇区大小 : %d字节\r\n", g_tSF.TotalSize/(1024*1024), g_tSF.PageSize);
000014  484c              LDR      r0,|L2.328|
000016  8b02              LDRH     r2,[r0,#0x18]  ; g_tSF
000018  6940              LDR      r0,[r0,#0x14]  ; g_tSF
00001a  0d01              LSRS     r1,r0,#20
00001c  a055              ADR      r0,|L2.372|
00001e  f7fffffe          BL       __2printf
;;;51     
;;;52     	sfDispMenu();		/* 打印命令提示 */
000022  f7fffffe          BL       sfDispMenu
;;;53     	while(1)
000026  e08e              B        |L2.326|
                  |L2.40|
;;;54     	{
;;;55     		bsp_Idle();		/* 这个函数在bsp.c文件。用户可以修改这个函数实现CPU休眠和喂狗 */
000028  f7fffffe          BL       bsp_Idle
;;;56     		
;;;57     		//cmd = getchar();	/* 从串口读入一个字符 (阻塞方式) */
;;;58     		if (comGetChar(COM1, &cmd))	/* 从串口读入一个字符(非阻塞方式) */
00002c  4669              MOV      r1,sp
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       comGetChar
000034  2800              CMP      r0,#0
000036  d065              BEQ      |L2.260|
;;;59     		{
;;;60     			switch (cmd)
000038  f89d0000          LDRB     r0,[sp,#0]
00003c  2836              CMP      r0,#0x36
00003e  d038              BEQ      |L2.178|
000040  dc08              BGT      |L2.84|
000042  f1a00031          SUB      r0,r0,#0x31
000046  2805              CMP      r0,#5
000048  d258              BCS      |L2.252|
00004a  e8dff000          TBB      [pc,r0]
00004e  0c15              DCB      0x0c,0x15
000050  1e242b00          DCB      0x1e,0x24,0x2b,0x00
                  |L2.84|
000054  2858              CMP      r0,#0x58
000056  d041              BEQ      |L2.220|
000058  285a              CMP      r0,#0x5a
00005a  d034              BEQ      |L2.198|
00005c  2878              CMP      r0,#0x78
00005e  d03c              BEQ      |L2.218|
000060  287a              CMP      r0,#0x7a
000062  d14b              BNE      |L2.252|
000064  e02e              B        |L2.196|
;;;61     			{
;;;62     				case '1':
;;;63     					printf("\r\n【1 - 读串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
000066  f44f5280          MOV      r2,#0x1000
00006a  2100              MOVS     r1,#0
00006c  a04b              ADR      r0,|L2.412|
00006e  f7fffffe          BL       __2printf
;;;64     					sfReadTest();		/* 读串行Flash数据，并打印出来数据内容 */
000072  f7fffffe          BL       sfReadTest
;;;65     					break;
000076  e044              B        |L2.258|
;;;66     
;;;67     				case '2':
;;;68     					printf("\r\n【2 - 写串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
000078  f44f5280          MOV      r2,#0x1000
00007c  2100              MOVS     r1,#0
00007e  a053              ADR      r0,|L2.460|
000080  f7fffffe          BL       __2printf
;;;69     					sfWriteTest();		/* 写串行Flash数据，并打印写入速度 */
000084  f7fffffe          BL       sfWriteTest
;;;70     					break;
000088  e03b              B        |L2.258|
;;;71     
;;;72     				case '3':
;;;73     					printf("\r\n【3 - 擦除整个串行Flash】\r\n");
00008a  a05c              ADR      r0,|L2.508|
00008c  f7fffffe          BL       __2printf
;;;74     					sfErase();			/* 擦除串行Flash数据，实际上就是写入全0xFF */
000090  f7fffffe          BL       sfErase
;;;75     					break;
000094  e035              B        |L2.258|
;;;76     
;;;77     				case '4':
;;;78     					printf("\r\n【4 - 写整个串行Flash, 全0x55】\r\n");
000096  a061              ADR      r0,|L2.540|
000098  f7fffffe          BL       __2printf
;;;79     					sfWriteAll(0x55);			/* 擦除串行Flash数据，实际上就是写入全0xFF */
00009c  2055              MOVS     r0,#0x55
00009e  f7fffffe          BL       sfWriteAll
;;;80     					break;
0000a2  e02e              B        |L2.258|
;;;81     
;;;82     				case '5':
;;;83     					printf("\r\n【5 - 写整个串行Flash, 全0xAA】\r\n");
0000a4  a066              ADR      r0,|L2.576|
0000a6  f7fffffe          BL       __2printf
;;;84     					sfWriteAll(0xAA);			/* 擦除串行Flash数据，实际上就是写入全0xFF */
0000aa  20aa              MOVS     r0,#0xaa
0000ac  f7fffffe          BL       sfWriteAll
;;;85     					break;
0000b0  e027              B        |L2.258|
                  |L2.178|
;;;86     
;;;87     				case '6':
;;;88     					printf("\r\n【6 - 读整个串行Flash, %dM字节】\r\n", g_tSF.TotalSize/(1024*1024));
0000b2  4825              LDR      r0,|L2.328|
0000b4  6940              LDR      r0,[r0,#0x14]  ; g_tSF
0000b6  0d01              LSRS     r1,r0,#20
0000b8  a06a              ADR      r0,|L2.612|
0000ba  f7fffffe          BL       __2printf
;;;89     					sfTestReadSpeed();		/* 读整个串行Flash数据，测试速度 */
0000be  f7fffffe          BL       sfTestReadSpeed
;;;90     					break;
0000c2  e01e              B        |L2.258|
                  |L2.196|
;;;91     
;;;92     				case 'z':
;;;93     				case 'Z': /* 读取前1K */
0000c4  bf00              NOP      
                  |L2.198|
;;;94     					if (uiReadPageNo > 0)
0000c6  b10c              CBZ      r4,|L2.204|
;;;95     					{
;;;96     						uiReadPageNo--;
0000c8  1e64              SUBS     r4,r4,#1
0000ca  e002              B        |L2.210|
                  |L2.204|
;;;97     					}
;;;98     					else
;;;99     					{
;;;100    						printf("已经是最前\r\n");
0000cc  a06f              ADR      r0,|L2.652|
0000ce  f7fffffe          BL       __2printf
                  |L2.210|
;;;101    					}
;;;102    					sfViewData(uiReadPageNo * 1024);
0000d2  02a0              LSLS     r0,r4,#10
0000d4  f7fffffe          BL       sfViewData
;;;103    					break;
0000d8  e013              B        |L2.258|
                  |L2.218|
;;;104    
;;;105    				case 'x':
;;;106    				case 'X': /* 读取后1K */
0000da  bf00              NOP      
                  |L2.220|
;;;107    					if (uiReadPageNo < g_tSF.TotalSize / 1024 - 1)
0000dc  481a              LDR      r0,|L2.328|
0000de  6940              LDR      r0,[r0,#0x14]  ; g_tSF
0000e0  2101              MOVS     r1,#1
0000e2  ebc12090          RSB      r0,r1,r0,LSR #10
0000e6  42a0              CMP      r0,r4
0000e8  d901              BLS      |L2.238|
;;;108    					{
;;;109    						uiReadPageNo++;
0000ea  1c64              ADDS     r4,r4,#1
0000ec  e002              B        |L2.244|
                  |L2.238|
;;;110    					}
;;;111    					else
;;;112    					{
;;;113    						printf("已经是最后\r\n");
0000ee  a06b              ADR      r0,|L2.668|
0000f0  f7fffffe          BL       __2printf
                  |L2.244|
;;;114    					}
;;;115    					sfViewData(uiReadPageNo * 1024);
0000f4  02a0              LSLS     r0,r4,#10
0000f6  f7fffffe          BL       sfViewData
;;;116    					break;
0000fa  e002              B        |L2.258|
                  |L2.252|
;;;117    
;;;118    				default:
;;;119    					sfDispMenu();	/* 无效命令，重新打印命令提示 */
0000fc  f7fffffe          BL       sfDispMenu
;;;120    					break;
000100  bf00              NOP      
                  |L2.258|
000102  bf00              NOP                            ;65
                  |L2.260|
;;;121    
;;;122    			}
;;;123    		}
;;;124    		
;;;125    		/* 按键滤波和检测由后台systick中断服务程序实现，我们只需要调用bsp_GetKey读取键值即可。 */		
;;;126    		switch (bsp_GetKey())	/* bsp_GetKey()读取键值, 无键按下时返回 KEY_NONE = 0 */
000104  f7fffffe          BL       bsp_GetKey
000108  2818              CMP      r0,#0x18
00010a  d219              BCS      |L2.320|
00010c  e8dff000          TBB      [pc,r0]
000110  190c0d18          DCB      0x19,0x0c,0x0d,0x18
000114  0e0f1810          DCB      0x0e,0x0f,0x18,0x10
000118  11181218          DCB      0x11,0x18,0x12,0x18
00011c  18131818          DCB      0x18,0x13,0x18,0x18
000120  14181815          DCB      0x14,0x18,0x18,0x15
000124  18181617          DCB      0x18,0x18,0x16,0x17
;;;127    		{
;;;128    			case KEY_DOWN_K1:			/* K1键按下 */
;;;129    				break;
000128  e00c              B        |L2.324|
;;;130    
;;;131    			case KEY_UP_K1:				/* K1键弹起 */
;;;132    				break;
00012a  e00b              B        |L2.324|
;;;133    
;;;134    			case KEY_DOWN_K2:			/* K2键按下 */
;;;135    				break;
00012c  e00a              B        |L2.324|
;;;136    
;;;137    			case KEY_UP_K2:				/* K2键弹起 */
;;;138    				break;
00012e  e009              B        |L2.324|
;;;139    
;;;140    			case KEY_DOWN_K3:			/* K3键按下 */
;;;141    				break;
000130  e008              B        |L2.324|
;;;142    
;;;143    			case KEY_UP_K3:				/* K3键弹起 */
;;;144    				break;
000132  e007              B        |L2.324|
;;;145    
;;;146    			case JOY_DOWN_U:			/* 摇杆UP键按下 */
;;;147    				break;
000134  e006              B        |L2.324|
;;;148    
;;;149    			case JOY_DOWN_D:			/* 摇杆DOWN键按下 */
;;;150    				break;
000136  e005              B        |L2.324|
;;;151    
;;;152    			case JOY_DOWN_L:			/* 摇杆LEFT键按下 */
;;;153    				break;
000138  e004              B        |L2.324|
;;;154    
;;;155    			case JOY_DOWN_R:			/* 摇杆RIGHT键按下 */
;;;156    				break;
00013a  e003              B        |L2.324|
;;;157    
;;;158    			case JOY_DOWN_OK:			/* 摇杆OK键按下 */
;;;159    				break;
00013c  e002              B        |L2.324|
;;;160    
;;;161    			case JOY_UP_OK:				/* 摇杆OK键弹起 */
;;;162    				break;
00013e  e001              B        |L2.324|
                  |L2.320|
;;;163    
;;;164    			case KEY_NONE:				/* 无键按下 */
000140  bf00              NOP      
;;;165    			default:
;;;166    				/* 其它的键值不处理 */
;;;167    				break;
000142  bf00              NOP      
                  |L2.324|
000144  bf00              NOP                            ;129
                  |L2.326|
000146  e76f              B        |L2.40|
;;;168    		}		
;;;169    	}
;;;170    }
;;;171    
                          ENDP

                  |L2.328|
                          DCD      g_tSF
                  |L2.332|
00014c  bcecb2e2          DCB      188,236,178,226,181,189,180,174,208,208,"Flash, ID = %08"
000150  b5bdb4ae
000154  d0d0466c
000158  6173682c
00015c  20494420
000160  3d202530
000164  38      
000165  582c20d0          DCB      "X, ",208,205,186,197,": %s \r\n",0
000169  cdbac53a
00016d  20257320
000171  0d0a00  
                  |L2.372|
000174  20202020          DCB      "    ",200,221,193,191," : %dM",215,214,189,218,", ",201
000178  c8ddc1bf
00017c  203a2025
000180  644dd7d6
000184  bdda2c20
000188  c9      
000189  c8c7f8b4          DCB      200,199,248,180,243,208,161," : %d",215,214,189,218,"\r\n"
00018d  f3d0a120
000191  3a202564
000195  d7d6bdda
000199  0d0a    
00019b  00                DCB      0
                  |L2.412|
00019c  0d0aa1be          DCB      "\r\n",161,190,"1 - ",182,193,180,174,208,208,"Flash, ",181
0001a0  31202d20
0001a4  b6c1b4ae
0001a8  d0d0466c
0001ac  6173682c
0001b0  20b5    
0001b2  d8d6b73a          DCB      216,214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218
0001b6  30782558
0001ba  2cb3a4b6
0001be  c83a2564
0001c2  d7d6bdda
0001c6  a1bf0d0a          DCB      161,191,"\r\n",0
0001ca  00      
0001cb  00                DCB      0
                  |L2.460|
0001cc  0d0aa1be          DCB      "\r\n",161,190,"2 - ",208,180,180,174,208,208,"Flash, ",181
0001d0  32202d20
0001d4  d0b4b4ae
0001d8  d0d0466c
0001dc  6173682c
0001e0  20b5    
0001e2  d8d6b73a          DCB      216,214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218
0001e6  30782558
0001ea  2cb3a4b6
0001ee  c83a2564
0001f2  d7d6bdda
0001f6  a1bf0d0a          DCB      161,191,"\r\n",0
0001fa  00      
0001fb  00                DCB      0
                  |L2.508|
0001fc  0d0aa1be          DCB      "\r\n",161,190,"3 - ",178,193,179,253,213,251,184,246,180
000200  33202d20
000204  b2c1b3fd
000208  d5fbb8f6
00020c  b4      
00020d  aed0d046          DCB      174,208,208,"Flash",161,191,"\r\n",0
000211  6c617368
000215  a1bf0d0a
000219  00      
00021a  00                DCB      0
00021b  00                DCB      0
                  |L2.540|
00021c  0d0aa1be          DCB      "\r\n",161,190,"4 - ",208,180,213,251,184,246,180,174,208
000220  34202d20
000224  d0b4d5fb
000228  b8f6b4ae
00022c  d0      
00022d  d0466c61          DCB      208,"Flash, ",200,171,"0x55",161,191,"\r\n",0
000231  73682c20
000235  c8ab3078
000239  3535a1bf
00023d  0d0a00  
                  |L2.576|
000240  0d0aa1be          DCB      "\r\n",161,190,"5 - ",208,180,213,251,184,246,180,174,208
000244  35202d20
000248  d0b4d5fb
00024c  b8f6b4ae
000250  d0      
000251  d0466c61          DCB      208,"Flash, ",200,171,"0xAA",161,191,"\r\n",0
000255  73682c20
000259  c8ab3078
00025d  4141a1bf
000261  0d0a00  
                  |L2.612|
000264  0d0aa1be          DCB      "\r\n",161,190,"6 - ",182,193,213,251,184,246,180,174,208
000268  36202d20
00026c  b6c1d5fb
000270  b8f6b4ae
000274  d0      
000275  d0466c61          DCB      208,"Flash, %dM",215,214,189,218,161,191,"\r\n",0
000279  73682c20
00027d  25644dd7
000281  d6bddaa1
000285  bf0d0a00
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
                  |L2.652|
00028c  d2d1bead          DCB      210,209,190,173,202,199,215,238,199,176,"\r\n",0
000290  cac7d7ee
000294  c7b00d0a
000298  00      
000299  00                DCB      0
00029a  00                DCB      0
00029b  00                DCB      0
                  |L2.668|
00029c  d2d1bead          DCB      210,209,190,173,202,199,215,238,186,243,"\r\n",0
0002a0  cac7d7ee
0002a4  baf30d0a
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0

                          AREA ||i.F2CA||, CODE, READONLY, ALIGN=1

                  F2CA PROC
;;;407    */
;;;408    void F2CA(unsigned char * charArray,float floatVariable)
000000  b501              PUSH     {r0,lr}
;;;409    {	
000002  ed2d0b02          VPUSH    {d0}
000006  4601              MOV      r1,r0
;;;410    unsigned char i;  
;;;411    unsigned char * pdata;
;;;412      pdata = (unsigned char*)&floatVariable;  //?float??????????unsigned char?  
000008  466a              MOV      r2,sp
;;;413    for(i=0;i<4;i++)  
00000a  2000              MOVS     r0,#0
00000c  e004              B        |L3.24|
                  |L3.14|
;;;414    { 
;;;415        charArray[i] = *pdata++;//????????????unsigned char???  
00000e  f8123b01          LDRB     r3,[r2],#1
000012  540b              STRB     r3,[r1,r0]
000014  1c43              ADDS     r3,r0,#1              ;413
000016  b2d8              UXTB     r0,r3                 ;413
                  |L3.24|
000018  2804              CMP      r0,#4                 ;413
00001a  dbf8              BLT      |L3.14|
;;;416    }  
;;;417    
;;;418    }
00001c  bd0e              POP      {r1-r3,pc}
;;;419    
                          ENDP


                          AREA ||i.sfDispMenu||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  sfDispMenu PROC
;;;380    */
;;;381    static void sfDispMenu(void)
000000  b510              PUSH     {r4,lr}
;;;382    {
;;;383    	printf("\r\n*******************************************\r\n");
000002  a015              ADR      r0,|L4.88|
000004  f7fffffe          BL       __2printf
;;;384    	printf("请选择操作命令:\r\n");
000008  a01f              ADR      r0,|L4.136|
00000a  f7fffffe          BL       __2printf
;;;385    	printf("【1 - 读串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
00000e  f44f5280          MOV      r2,#0x1000
000012  2100              MOVS     r1,#0
000014  a021              ADR      r0,|L4.156|
000016  f7fffffe          BL       __2printf
;;;386    	printf("【2 - 写串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
00001a  f44f5280          MOV      r2,#0x1000
00001e  2100              MOVS     r1,#0
000020  a02a              ADR      r0,|L4.204|
000022  f7fffffe          BL       __2printf
;;;387    	printf("【3 - 擦除整个串行Flash】\r\n");
000026  a035              ADR      r0,|L4.252|
000028  f7fffffe          BL       __2printf
;;;388    	printf("【4 - 写整个串行Flash, 全0x55】\r\n");
00002c  a03a              ADR      r0,|L4.280|
00002e  f7fffffe          BL       __2printf
;;;389    	printf("【5 - 写整个串行Flash, 全0xAA】\r\n");
000032  a042              ADR      r0,|L4.316|
000034  f7fffffe          BL       __2printf
;;;390    	printf("【6 - 读整个串行Flash, 测试读速度】\r\n");
000038  a049              ADR      r0,|L4.352|
00003a  f7fffffe          BL       __2printf
;;;391    	printf("【Z - 读取前1K，地址自动减少】\r\n");
00003e  a052              ADR      r0,|L4.392|
000040  f7fffffe          BL       __2printf
;;;392    	printf("【X - 读取后1K，地址自动增加】\r\n");
000044  a059              ADR      r0,|L4.428|
000046  f7fffffe          BL       __2printf
;;;393    	printf("其他任意键 - 显示命令提示\r\n");
00004a  a061              ADR      r0,|L4.464|
00004c  f7fffffe          BL       __2printf
;;;394    	printf("\r\n");
000050  a066              ADR      r0,|L4.492|
000052  f7fffffe          BL       __2printf
;;;395    }
000056  bd10              POP      {r4,pc}
;;;396    
                          ENDP

                  |L4.88|
000058  0d0a2a2a          DCB      "\r\n*******************************************\r\n",0
00005c  2a2a2a2a
000060  2a2a2a2a
000064  2a2a2a2a
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a0d0a00
                  |L4.136|
000088  c7ebd1a1          DCB      199,235,209,161,212,241,178,217,215,247,195,252,193,238,":"
00008c  d4f1b2d9
000090  d7f7c3fc
000094  c1ee3a  
000097  0d0a00            DCB      "\r\n",0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L4.156|
00009c  a1be3120          DCB      161,190,"1 - ",182,193,180,174,208,208,"Flash, ",181,216
0000a0  2d20b6c1
0000a4  b4aed0d0
0000a8  466c6173
0000ac  682c20b5
0000b0  d8      
0000b1  d6b73a30          DCB      214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218,161
0000b5  7825582c
0000b9  b3a4b6c8
0000bd  3a2564d7
0000c1  d6bddaa1
0000c5  bf0d0a00          DCB      191,"\r\n",0
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L4.204|
0000cc  a1be3220          DCB      161,190,"2 - ",208,180,180,174,208,208,"Flash, ",181,216
0000d0  2d20d0b4
0000d4  b4aed0d0
0000d8  466c6173
0000dc  682c20b5
0000e0  d8      
0000e1  d6b73a30          DCB      214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218,161
0000e5  7825582c
0000e9  b3a4b6c8
0000ed  3a2564d7
0000f1  d6bddaa1
0000f5  bf0d0a00          DCB      191,"\r\n",0
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L4.252|
0000fc  a1be3320          DCB      161,190,"3 - ",178,193,179,253,213,251,184,246,180,174,208
000100  2d20b2c1
000104  b3fdd5fb
000108  b8f6b4ae
00010c  d0      
00010d  d0466c61          DCB      208,"Flash",161,191,"\r\n",0
000111  7368a1bf
000115  0d0a00  
                  |L4.280|
000118  a1be3420          DCB      161,190,"4 - ",208,180,213,251,184,246,180,174,208,208,"F"
00011c  2d20d0b4
000120  d5fbb8f6
000124  b4aed0d0
000128  46      
000129  6c617368          DCB      "lash, ",200,171,"0x55",161,191,"\r\n",0
00012d  2c20c8ab
000131  30783535
000135  a1bf0d0a
000139  00      
00013a  00                DCB      0
00013b  00                DCB      0
                  |L4.316|
00013c  a1be3520          DCB      161,190,"5 - ",208,180,213,251,184,246,180,174,208,208,"F"
000140  2d20d0b4
000144  d5fbb8f6
000148  b4aed0d0
00014c  46      
00014d  6c617368          DCB      "lash, ",200,171,"0xAA",161,191,"\r\n",0
000151  2c20c8ab
000155  30784141
000159  a1bf0d0a
00015d  00      
00015e  00                DCB      0
00015f  00                DCB      0
                  |L4.352|
000160  a1be3620          DCB      161,190,"6 - ",182,193,213,251,184,246,180,174,208,208,"F"
000164  2d20b6c1
000168  d5fbb8f6
00016c  b4aed0d0
000170  46      
000171  6c617368          DCB      "lash, ",178,226,202,212,182,193,203,217,182,200,161,191
000175  2c20b2e2
000179  cad4b6c1
00017d  cbd9b6c8
000181  a1bf    
000183  0d0a00            DCB      "\r\n",0
000186  00                DCB      0
000187  00                DCB      0
                  |L4.392|
000188  a1be5a20          DCB      161,190,"Z - ",182,193,200,161,199,176,"1K",163,172,181,216
00018c  2d20b6c1
000190  c8a1c7b0
000194  314ba3ac
000198  b5d8    
00019a  d6b7d7d4          DCB      214,183,215,212,182,175,188,245,201,217,161,191,"\r\n",0
00019e  b6afbcf5
0001a2  c9d9a1bf
0001a6  0d0a00  
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L4.428|
0001ac  a1be5820          DCB      161,190,"X - ",182,193,200,161,186,243,"1K",163,172,181,216
0001b0  2d20b6c1
0001b4  c8a1baf3
0001b8  314ba3ac
0001bc  b5d8    
0001be  d6b7d7d4          DCB      214,183,215,212,182,175,212,246,188,211,161,191,"\r\n",0
0001c2  b6afd4f6
0001c6  bcd3a1bf
0001ca  0d0a00  
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L4.464|
0001d0  c6e4cbfb          DCB      198,228,203,251,200,206,210,226,188,252," - ",207,212,202
0001d4  c8ced2e2
0001d8  bcfc202d
0001dc  20cfd4ca
0001e0  bec3fcc1          DCB      190,195,252,193,238,204,225,202,190,"\r\n",0
0001e4  eecce1ca
0001e8  be0d0a00
                  |L4.492|
0001ec  0d0a00            DCB      "\r\n",0
0001ef  00                DCB      0

                          AREA ||i.sfErase||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfErase PROC
;;;326    */
;;;327    static void sfErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;328    {
;;;329    	int32_t iTime1, iTime2;
;;;330    
;;;331    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000002  f7fffffe          BL       bsp_GetRunTime
000006  4604              MOV      r4,r0
;;;332    	sf_EraseChip();
000008  f7fffffe          BL       sf_EraseChip
;;;333    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
00000c  f7fffffe          BL       bsp_GetRunTime
000010  4605              MOV      r5,r0
;;;334    
;;;335    	/* 打印读速度 */
;;;336    	printf("擦除串行Flash完成！, 耗时: %dms\r\n", iTime2 - iTime1);
000012  1b29              SUBS     r1,r5,r4
000014  a001              ADR      r0,|L5.28|
000016  f7fffffe          BL       __2printf
;;;337    	return;
;;;338    }
00001a  bd70              POP      {r4-r6,pc}
;;;339    
                          ENDP

                  |L5.28|
00001c  b2c1b3fd          DCB      178,193,179,253,180,174,208,208,"Flash",205,234,179,201,163
000020  b4aed0d0
000024  466c6173
000028  68cdeab3
00002c  c9a3    
00002e  a12c20ba          DCB      161,", ",186,196,202,177,": %dms\r\n",0
000032  c4cab13a
000036  2025646d
00003a  730d0a00
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.sfReadTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfReadTest PROC
;;;179    */
;;;180    static void sfReadTest(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;181    {
000002  b081              SUB      sp,sp,#4
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;182    	uint16_t i;
;;;183    	int32_t iTime1, iTime2;
;;;184    	uint8_t buf[TEST_SIZE];
;;;185    
;;;186    	/* 起始地址 = 0， 数据长度为 256 */
;;;187    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000008  f7fffffe          BL       bsp_GetRunTime
00000c  4605              MOV      r5,r0
;;;188    	sf_ReadBuffer(buf, TEST_ADDR, TEST_SIZE);
00000e  f44f5280          MOV      r2,#0x1000
000012  2100              MOVS     r1,#0
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       sf_ReadBuffer
;;;189    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
00001a  f7fffffe          BL       bsp_GetRunTime
00001e  4606              MOV      r6,r0
;;;190    	printf("读串行Flash成功，数据如下：\r\n");
000020  a016              ADR      r0,|L6.124|
000022  f7fffffe          BL       __2printf
;;;191    
;;;192    	/* 打印数据 */
;;;193    	for (i = 0; i < TEST_SIZE; i++)
000026  2400              MOVS     r4,#0
000028  e015              B        |L6.86|
                  |L6.42|
;;;194    	{
;;;195    		printf(" %02X", buf[i]);
00002a  a801              ADD      r0,sp,#4
00002c  5d01              LDRB     r1,[r0,r4]
00002e  a01b              ADR      r0,|L6.156|
000030  f7fffffe          BL       __2printf
;;;196    
;;;197    		if ((i & 31) == 31)
000034  f004001f          AND      r0,r4,#0x1f
000038  281f              CMP      r0,#0x1f
00003a  d103              BNE      |L6.68|
;;;198    		{
;;;199    			printf("\r\n");	/* 每行显示16字节数据 */
00003c  a019              ADR      r0,|L6.164|
00003e  f7fffffe          BL       __2printf
000042  e006              B        |L6.82|
                  |L6.68|
;;;200    		}
;;;201    		else if ((i & 31) == 15)
000044  f004001f          AND      r0,r4,#0x1f
000048  280f              CMP      r0,#0xf
00004a  d102              BNE      |L6.82|
;;;202    		{
;;;203    			printf(" - ");
00004c  a016              ADR      r0,|L6.168|
00004e  f7fffffe          BL       __2printf
                  |L6.82|
000052  1c60              ADDS     r0,r4,#1              ;193
000054  b284              UXTH     r4,r0                 ;193
                  |L6.86|
000056  f5b45f80          CMP      r4,#0x1000            ;193
00005a  dbe6              BLT      |L6.42|
;;;204    		}
;;;205    	}
;;;206    
;;;207    	/* 打印读速度 */
;;;208    	printf("数据长度: %d字节, 读耗时: %dms, 读速度: %d Bytes/s\r\n", TEST_SIZE, iTime2 - iTime1, (TEST_SIZE * 1000) / (iTime2 - iTime1));
00005c  1b70              SUBS     r0,r6,r5
00005e  f44f117a          MOV      r1,#0x3e8000
000062  fb91f7f0          SDIV     r7,r1,r0
000066  1b72              SUBS     r2,r6,r5
000068  463b              MOV      r3,r7
00006a  f44f5180          MOV      r1,#0x1000
00006e  a00f              ADR      r0,|L6.172|
000070  f7fffffe          BL       __2printf
;;;209    }
000074  b001              ADD      sp,sp,#4
000076  f50d5d80          ADD      sp,sp,#0x1000
00007a  bdf0              POP      {r4-r7,pc}
;;;210    
                          ENDP

                  |L6.124|
00007c  b6c1b4ae          DCB      182,193,180,174,208,208,"Flash",179,201,185,166,163,172,202
000080  d0d0466c
000084  617368b3
000088  c9b9a6a3
00008c  acca    
00008e  fdbeddc8          DCB      253,190,221,200,231,207,194,163,186,"\r\n",0
000092  e7cfc2a3
000096  ba0d0a00
00009a  00                DCB      0
00009b  00                DCB      0
                  |L6.156|
00009c  20253032          DCB      " %02X",0
0000a0  5800    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L6.164|
0000a4  0d0a00            DCB      "\r\n",0
0000a7  00                DCB      0
                  |L6.168|
0000a8  202d2000          DCB      " - ",0
                  |L6.172|
0000ac  cafdbedd          DCB      202,253,190,221,179,164,182,200,": %d",215,214,189,218,","
0000b0  b3a4b6c8
0000b4  3a202564
0000b8  d7d6bdda
0000bc  2c      
0000bd  20b6c1ba          DCB      " ",182,193,186,196,202,177,": %dms, ",182,193,203,217,182
0000c1  c4cab13a
0000c5  2025646d
0000c9  732c20b6
0000cd  c1cbd9b6
0000d1  c83a2025          DCB      200,": %d Bytes/s\r\n",0
0000d5  64204279
0000d9  7465732f
0000dd  730d0a00
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.sfTestReadSpeed||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfTestReadSpeed PROC
;;;219    */
;;;220    static void sfTestReadSpeed(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;221    {
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;222    	uint16_t i;
;;;223    	int32_t iTime1, iTime2;
;;;224    	uint8_t buf[TEST_SIZE];
;;;225    	uint32_t uiAddr;
;;;226    
;;;227    	/* 起始地址 = 0， 数据长度为 256 */
;;;228    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000008  f7fffffe          BL       bsp_GetRunTime
00000c  4606              MOV      r6,r0
;;;229    	uiAddr = 0;
00000e  2700              MOVS     r7,#0
;;;230    	for (i = 0; i < g_tSF.TotalSize / TEST_SIZE; i++, uiAddr += TEST_SIZE)
000010  2500              MOVS     r5,#0
000012  e009              B        |L7.40|
                  |L7.20|
;;;231    	{
;;;232    		sf_ReadBuffer(buf, uiAddr, TEST_SIZE);
000014  f44f5280          MOV      r2,#0x1000
000018  4639              MOV      r1,r7
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       sf_ReadBuffer
000020  1c68              ADDS     r0,r5,#1              ;230
000022  b285              UXTH     r5,r0                 ;230
000024  f5075780          ADD      r7,r7,#0x1000         ;230
                  |L7.40|
000028  480d              LDR      r0,|L7.96|
00002a  6940              LDR      r0,[r0,#0x14]         ;230  ; g_tSF
00002c  ebb53f10          CMP      r5,r0,LSR #12         ;230
000030  d3f0              BCC      |L7.20|
;;;233    	}
;;;234    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
000032  f7fffffe          BL       bsp_GetRunTime
000036  4604              MOV      r4,r0
;;;235    
;;;236    	/* 打印读速度 */
;;;237    	printf("数据长度: %d字节, 读耗时: %dms, 读速度: %d Bytes/s\r\n", g_tSF.TotalSize, iTime2 - iTime1, (g_tSF.TotalSize * 1000) / (iTime2 - iTime1));
000038  4809              LDR      r0,|L7.96|
00003a  6940              LDR      r0,[r0,#0x14]  ; g_tSF
00003c  f44f717a          MOV      r1,#0x3e8
000040  4348              MULS     r0,r1,r0
000042  1ba1              SUBS     r1,r4,r6
000044  fbb0f8f1          UDIV     r8,r0,r1
000048  1ba2              SUBS     r2,r4,r6
00004a  4805              LDR      r0,|L7.96|
00004c  4643              MOV      r3,r8
00004e  6941              LDR      r1,[r0,#0x14]  ; g_tSF
000050  a004              ADR      r0,|L7.100|
000052  f7fffffe          BL       __2printf
;;;238    }
000056  f50d5d80          ADD      sp,sp,#0x1000
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;239    
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      g_tSF
                  |L7.100|
000064  cafdbedd          DCB      202,253,190,221,179,164,182,200,": %d",215,214,189,218,","
000068  b3a4b6c8
00006c  3a202564
000070  d7d6bdda
000074  2c      
000075  20b6c1ba          DCB      " ",182,193,186,196,202,177,": %dms, ",182,193,203,217,182
000079  c4cab13a
00007d  2025646d
000081  732c20b6
000085  c1cbd9b6
000089  c83a2025          DCB      200,": %d Bytes/s\r\n",0
00008d  64204279
000091  7465732f
000095  730d0a00
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.sfViewData||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  sfViewData PROC
;;;348    */
;;;349    static void sfViewData(uint32_t _uiAddr)
000000  b530              PUSH     {r4,r5,lr}
;;;350    {
000002  f2ad4d04          SUB      sp,sp,#0x404
000006  4605              MOV      r5,r0
;;;351    	uint16_t i;
;;;352    	uint8_t buf[1024];
;;;353    
;;;354    	sf_ReadBuffer(buf, _uiAddr,  1024);		/* 读数据 */
000008  f44f6280          MOV      r2,#0x400
00000c  4629              MOV      r1,r5
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       sf_ReadBuffer
;;;355    	printf("地址：0x%08X; 数据长度 = 1024\r\n", _uiAddr);
000014  4629              MOV      r1,r5
000016  a010              ADR      r0,|L8.88|
000018  f7fffffe          BL       __2printf
;;;356    
;;;357    	/* 打印数据 */
;;;358    	for (i = 0; i < 1024; i++)
00001c  2400              MOVS     r4,#0
00001e  e015              B        |L8.76|
                  |L8.32|
;;;359    	{
;;;360    		printf(" %02X", buf[i]);
000020  a801              ADD      r0,sp,#4
000022  5d01              LDRB     r1,[r0,r4]
000024  a014              ADR      r0,|L8.120|
000026  f7fffffe          BL       __2printf
;;;361    
;;;362    		if ((i & 31) == 31)
00002a  f004001f          AND      r0,r4,#0x1f
00002e  281f              CMP      r0,#0x1f
000030  d103              BNE      |L8.58|
;;;363    		{
;;;364    			printf("\r\n");	/* 每行显示16字节数据 */
000032  a013              ADR      r0,|L8.128|
000034  f7fffffe          BL       __2printf
000038  e006              B        |L8.72|
                  |L8.58|
;;;365    		}
;;;366    		else if ((i & 31) == 15)
00003a  f004001f          AND      r0,r4,#0x1f
00003e  280f              CMP      r0,#0xf
000040  d102              BNE      |L8.72|
;;;367    		{
;;;368    			printf(" - ");
000042  a010              ADR      r0,|L8.132|
000044  f7fffffe          BL       __2printf
                  |L8.72|
000048  1c60              ADDS     r0,r4,#1              ;358
00004a  b284              UXTH     r4,r0                 ;358
                  |L8.76|
00004c  f5b46f80          CMP      r4,#0x400             ;358
000050  dbe6              BLT      |L8.32|
;;;369    		}
;;;370    	}
;;;371    }
000052  f20d4d04          ADD      sp,sp,#0x404
000056  bd30              POP      {r4,r5,pc}
;;;372    
                          ENDP

                  |L8.88|
000058  b5d8d6b7          DCB      181,216,214,183,163,186,"0x%08X; ",202,253,190,221,179,164
00005c  a3ba3078
000060  25303858
000064  3b20cafd
000068  beddb3a4
00006c  b6c8203d          DCB      182,200," = 1024\r\n",0
000070  20313032
000074  340d0a00
                  |L8.120|
000078  20253032          DCB      " %02X",0
00007c  5800    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L8.128|
000080  0d0a00            DCB      "\r\n",0
000083  00                DCB      0
                  |L8.132|
000084  202d2000          DCB      " - ",0

                          AREA ||i.sfWriteAll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfWriteAll PROC
;;;285    */
;;;286    static void sfWriteAll(uint8_t _ch)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;287    {
000004  f5ad5d80          SUB      sp,sp,#0x1000
000008  4607              MOV      r7,r0
;;;288    	uint16_t i;
;;;289    	int32_t iTime1, iTime2;
;;;290    	uint8_t buf[4 * 1024];
;;;291    
;;;292    	/* 填充测试缓冲区 */
;;;293    	for (i = 0; i < TEST_SIZE; i++)
00000a  2400              MOVS     r4,#0
00000c  e003              B        |L9.22|
                  |L9.14|
;;;294    	{
;;;295    		buf[i] = _ch;
00000e  f80d7004          STRB     r7,[sp,r4]
000012  1c60              ADDS     r0,r4,#1              ;293
000014  b284              UXTH     r4,r0                 ;293
                  |L9.22|
000016  f5b45f80          CMP      r4,#0x1000            ;293
00001a  dbf8              BLT      |L9.14|
;;;296    	}
;;;297    
;;;298    	/* 写EEPROM, 起始地址 = 0，数据长度为 256 */
;;;299    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
00001c  f7fffffe          BL       bsp_GetRunTime
000020  4605              MOV      r5,r0
;;;300    	for (i = 0; i < g_tSF.TotalSize / g_tSF.PageSize; i++)
000022  2400              MOVS     r4,#0
000024  e01f              B        |L9.102|
                  |L9.38|
;;;301    	{
;;;302    		if (sf_WriteBuffer(buf, i * g_tSF.PageSize, g_tSF.PageSize) == 0)
000026  481e              LDR      r0,|L9.160|
000028  8b02              LDRH     r2,[r0,#0x18]  ; g_tSF
00002a  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00002c  fb00f104          MUL      r1,r0,r4
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       sf_WriteBuffer
000036  b930              CBNZ     r0,|L9.70|
;;;303    		{
;;;304    			printf("写串行Flash出错！\r\n");
000038  a01a              ADR      r0,|L9.164|
00003a  f7fffffe          BL       __2printf
                  |L9.62|
;;;305    			return;
;;;306    		}
;;;307    		printf(".");
;;;308    		if (((i + 1) % 128) == 0)
;;;309    		{
;;;310    			printf("\r\n");
;;;311    		}
;;;312    	}
;;;313    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
;;;314    
;;;315    	/* 打印读速度 */
;;;316    	printf("数据长度: %dK字节, 写耗时: %dms, 写速度: %dB/s\r\n", g_tSF.TotalSize / 1024, iTime2 - iTime1, (g_tSF.TotalSize * 1000) / (iTime2 - iTime1));
;;;317    }
00003e  f50d5d80          ADD      sp,sp,#0x1000
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L9.70|
000046  a01c              ADR      r0,|L9.184|
000048  f7fffffe          BL       __2printf
00004c  1c60              ADDS     r0,r4,#1              ;308
00004e  17c1              ASRS     r1,r0,#31             ;308
000050  eb006151          ADD      r1,r0,r1,LSR #25      ;308
000054  11c9              ASRS     r1,r1,#7              ;308
000056  ebb011c1          SUBS     r1,r0,r1,LSL #7       ;308
00005a  d102              BNE      |L9.98|
00005c  a017              ADR      r0,|L9.188|
00005e  f7fffffe          BL       __2printf
                  |L9.98|
000062  1c60              ADDS     r0,r4,#1              ;300
000064  b284              UXTH     r4,r0                 ;300
                  |L9.102|
000066  480e              LDR      r0,|L9.160|
000068  6940              LDR      r0,[r0,#0x14]         ;300  ; g_tSF
00006a  490d              LDR      r1,|L9.160|
00006c  8b09              LDRH     r1,[r1,#0x18]         ;300  ; g_tSF
00006e  fbb0f0f1          UDIV     r0,r0,r1              ;300
000072  42a0              CMP      r0,r4                 ;300
000074  d8d7              BHI      |L9.38|
000076  f7fffffe          BL       bsp_GetRunTime
00007a  4606              MOV      r6,r0                 ;313
00007c  4808              LDR      r0,|L9.160|
00007e  6940              LDR      r0,[r0,#0x14]         ;316  ; g_tSF
000080  f44f717a          MOV      r1,#0x3e8             ;316
000084  4348              MULS     r0,r1,r0              ;316
000086  1b71              SUBS     r1,r6,r5              ;316
000088  fbb0f8f1          UDIV     r8,r0,r1              ;316
00008c  1b72              SUBS     r2,r6,r5              ;316
00008e  4804              LDR      r0,|L9.160|
000090  6940              LDR      r0,[r0,#0x14]         ;316  ; g_tSF
000092  0a81              LSRS     r1,r0,#10             ;316
000094  4643              MOV      r3,r8                 ;316
000096  a00a              ADR      r0,|L9.192|
000098  f7fffffe          BL       __2printf
00009c  bf00              NOP      
00009e  e7ce              B        |L9.62|
;;;318    
                          ENDP

                  |L9.160|
                          DCD      g_tSF
                  |L9.164|
0000a4  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,246,180,237,163,161,"\r"
0000a8  d0d0466c
0000ac  617368b3
0000b0  f6b4eda3
0000b4  a10d    
0000b6  0a00              DCB      "\n",0
                  |L9.184|
0000b8  2e00              DCB      ".",0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L9.188|
0000bc  0d0a00            DCB      "\r\n",0
0000bf  00                DCB      0
                  |L9.192|
0000c0  cafdbedd          DCB      202,253,190,221,179,164,182,200,": %dK",215,214,189,218,","
0000c4  b3a4b6c8
0000c8  3a202564
0000cc  4bd7d6bd
0000d0  da2c    
0000d2  20d0b4ba          DCB      " ",208,180,186,196,202,177,": %dms, ",208,180,203,217,182
0000d6  c4cab13a
0000da  2025646d
0000de  732c20d0
0000e2  b4cbd9b6
0000e6  c83a2025          DCB      200,": %dB/s\r\n",0
0000ea  64422f73
0000ee  0d0a00  
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||i.sfWriteTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfWriteTest PROC
;;;247    */
;;;248    static void sfWriteTest(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;249    {
000002  b081              SUB      sp,sp,#4
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;250    	uint16_t i;
;;;251    	int32_t iTime1, iTime2;
;;;252    	uint8_t buf[TEST_SIZE];
;;;253    
;;;254    	/* 填充测试缓冲区 */
;;;255    	for (i = 0; i < TEST_SIZE; i++)
000008  2400              MOVS     r4,#0
00000a  e003              B        |L10.20|
                  |L10.12|
;;;256    	{
;;;257    		buf[i] = i;
00000c  a901              ADD      r1,sp,#4
00000e  550c              STRB     r4,[r1,r4]
000010  1c60              ADDS     r0,r4,#1              ;255
000012  b284              UXTH     r4,r0                 ;255
                  |L10.20|
000014  f5b45f80          CMP      r4,#0x1000            ;255
000018  dbf8              BLT      |L10.12|
;;;258    	}
;;;259    
;;;260    	/* 写EEPROM, 起始地址 = 0，数据长度为 256 */
;;;261    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
00001a  f7fffffe          BL       bsp_GetRunTime
00001e  4605              MOV      r5,r0
;;;262    	if (sf_WriteBuffer(buf, TEST_ADDR, TEST_SIZE) == 0)
000020  f44f5280          MOV      r2,#0x1000
000024  2100              MOVS     r1,#0
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       sf_WriteBuffer
00002c  b930              CBNZ     r0,|L10.60|
;;;263    	{
;;;264    		printf("写串行Flash出错！\r\n");
00002e  a00d              ADR      r0,|L10.100|
000030  f7fffffe          BL       __2printf
                  |L10.52|
;;;265    		return;
;;;266    	}
;;;267    	else
;;;268    	{
;;;269    		iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
;;;270    		printf("写串行Flash成功！\r\n");
;;;271    	}
;;;272    
;;;273    
;;;274    	/* 打印读速度 */
;;;275    	printf("数据长度: %d字节, 写耗时: %dms, 写速度: %dB/s\r\n", TEST_SIZE, iTime2 - iTime1, (TEST_SIZE * 1000) / (iTime2 - iTime1));
;;;276    }
000034  b001              ADD      sp,sp,#4
000036  f50d5d80          ADD      sp,sp,#0x1000
00003a  bdf0              POP      {r4-r7,pc}
                  |L10.60|
00003c  f7fffffe          BL       bsp_GetRunTime
000040  4606              MOV      r6,r0                 ;269
000042  a00d              ADR      r0,|L10.120|
000044  f7fffffe          BL       __2printf
000048  1b70              SUBS     r0,r6,r5              ;275
00004a  f44f117a          MOV      r1,#0x3e8000          ;275
00004e  fb91f7f0          SDIV     r7,r1,r0              ;275
000052  1b72              SUBS     r2,r6,r5              ;275
000054  463b              MOV      r3,r7                 ;275
000056  f44f5180          MOV      r1,#0x1000            ;275
00005a  a00c              ADR      r0,|L10.140|
00005c  f7fffffe          BL       __2printf
000060  bf00              NOP      
000062  e7e7              B        |L10.52|
;;;277    
                          ENDP

                  |L10.100|
000064  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,246,180,237,163,161,"\r"
000068  d0d0466c
00006c  617368b3
000070  f6b4eda3
000074  a10d    
000076  0a00              DCB      "\n",0
                  |L10.120|
000078  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,201,185,166,163,161,"\r"
00007c  d0d0466c
000080  617368b3
000084  c9b9a6a3
000088  a10d    
00008a  0a00              DCB      "\n",0
                  |L10.140|
00008c  cafdbedd          DCB      202,253,190,221,179,164,182,200,": %d",215,214,189,218,","
000090  b3a4b6c8
000094  3a202564
000098  d7d6bdda
00009c  2c      
00009d  20d0b4ba          DCB      " ",208,180,186,196,202,177,": %dms, ",208,180,203,217,182
0000a1  c4cab13a
0000a5  2025646d
0000a9  732c20d0
0000ad  b4cbd9b6
0000b1  c83a2025          DCB      200,": %dB/s\r\n",0
0000b5  64422f73
0000b9  0d0a00  

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\demo_spi_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_demo_spi_flash_c_7ee74ca9____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_demo_spi_flash_c_7ee74ca9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_demo_spi_flash_c_7ee74ca9____REVSH|
#line 144
|__asm___16_demo_spi_flash_c_7ee74ca9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
