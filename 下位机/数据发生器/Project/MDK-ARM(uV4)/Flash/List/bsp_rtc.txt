; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_rtc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_rtc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\bsp_rtc.crf ..\..\User\bsp_stm32f4xx\src\bsp_rtc.c]
                          THUMB

                          AREA ||i.RTC_AlarmShow||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RTC_AlarmShow PROC
;;;264    */
;;;265    void RTC_AlarmShow(void)
000000  b500              PUSH     {lr}
;;;266    {	
000002  b08f              SUB      sp,sp,#0x3c
;;;267    	uint8_t showalarm[50] = {0};
000004  2134              MOVS     r1,#0x34
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;268    
;;;269    	/* 设置当前闹钟 */
;;;270    	RTC_GetAlarm(RTC_Format_BIN, RTC_Alarm_A, &RTC_AlarmStructure);
00000c  4a08              LDR      r2,|L1.48|
00000e  f44f7180          MOV      r1,#0x100
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       RTC_GetAlarm
;;;271    	sprintf((char*)showalarm,"%0.2d:%0.2d:%0.2d", RTC_AlarmStructure.RTC_AlarmTime.RTC_Hours, 
000018  4805              LDR      r0,|L1.48|
00001a  7880              LDRB     r0,[r0,#2]  ; RTC_AlarmStructure
00001c  9000              STR      r0,[sp,#0]
00001e  4804              LDR      r0,|L1.48|
000020  7843              LDRB     r3,[r0,#1]  ; RTC_AlarmStructure
000022  7802              LDRB     r2,[r0,#0]  ; RTC_AlarmStructure
000024  a103              ADR      r1,|L1.52|
000026  a802              ADD      r0,sp,#8
000028  f7fffffe          BL       __2sprintf
;;;272    												RTC_AlarmStructure.RTC_AlarmTime.RTC_Minutes, 
;;;273    												RTC_AlarmStructure.RTC_AlarmTime.RTC_Seconds);
;;;274    }
00002c  b00f              ADD      sp,sp,#0x3c
00002e  bd00              POP      {pc}
;;;275    
                          ENDP

                  |L1.48|
                          DCD      RTC_AlarmStructure
                  |L1.52|
000034  25302e32          DCB      "%0.2d:%0.2d:%0.2d",0
000038  643a2530
00003c  2e32643a
000040  25302e32
000044  6400    
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.RTC_Config||, CODE, READONLY, ALIGN=2

                  RTC_Config PROC
;;;122    */
;;;123    void RTC_Config(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    	/* 使能PWR时钟 */
;;;126    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;127    
;;;128    	/* 允许访问RTC */
;;;129    	PWR_BackupAccessCmd(ENABLE);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       PWR_BackupAccessCmd
;;;130    
;;;131    	/* 选择LSI作为时钟源 */
;;;132    #if defined (RTC_CLOCK_SOURCE_LSI)  
;;;133    	
;;;134    	/* Enable the LSI OSC */ 
;;;135    	RCC_LSICmd(ENABLE);
;;;136    
;;;137    	/* Wait till LSI is ready */  
;;;138    	while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET)
;;;139    	{
;;;140    	}
;;;141    
;;;142    	/* 选择RTC时钟源 */
;;;143    	RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
;;;144    	
;;;145    	/* ck_spre(1Hz) = RTCCLK(LSE) /(uwAsynchPrediv + 1)*(uwSynchPrediv + 1)*/
;;;146    	uwSynchPrediv = 0xFF;
;;;147    	uwAsynchPrediv = 0x7F;
;;;148    	
;;;149    	/* 选择LSE作为RTC时钟 */
;;;150    #elif defined (RTC_CLOCK_SOURCE_LSE)
;;;151    	/* 使能LSE振荡器  */
;;;152    	RCC_LSEConfig(RCC_LSE_ON);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       RCC_LSEConfig
;;;153    
;;;154    	/* 等待就绪 */  
;;;155    	while(RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
000016  bf00              NOP      
                  |L2.24|
000018  2041              MOVS     r0,#0x41
00001a  f7fffffe          BL       RCC_GetFlagStatus
00001e  2800              CMP      r0,#0
000020  d0fa              BEQ      |L2.24|
;;;156    	{
;;;157    	}
;;;158    
;;;159    	/* 选择RTC时钟源 */
;;;160    	RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
000022  f44f7080          MOV      r0,#0x100
000026  f7fffffe          BL       RCC_RTCCLKConfig
;;;161    
;;;162    	uwSynchPrediv = 0xFF;
00002a  20ff              MOVS     r0,#0xff
00002c  492a              LDR      r1,|L2.216|
00002e  6008              STR      r0,[r1,#0]  ; uwSynchPrediv
;;;163    	uwAsynchPrediv = 0x7F;
000030  207f              MOVS     r0,#0x7f
000032  492a              LDR      r1,|L2.220|
000034  6008              STR      r0,[r1,#0]  ; uwAsynchPrediv
;;;164    
;;;165    #else
;;;166    #error Please select the RTC Clock source inside the main.c file
;;;167    #endif 
;;;168    
;;;169    	/* 使能RTC时钟 */
;;;170    	RCC_RTCCLKCmd(ENABLE);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       RCC_RTCCLKCmd
;;;171    
;;;172    	/* 等待RTC APB寄存器同步 */
;;;173    	RTC_WaitForSynchro();
00003c  f7fffffe          BL       RTC_WaitForSynchro
;;;174    
;;;175    	/* 配置RTC数据寄存器和分频器  */
;;;176    	RTC_InitStructure.RTC_AsynchPrediv = uwAsynchPrediv;
000040  4826              LDR      r0,|L2.220|
000042  6800              LDR      r0,[r0,#0]  ; uwAsynchPrediv
000044  4926              LDR      r1,|L2.224|
000046  6048              STR      r0,[r1,#4]  ; RTC_InitStructure
;;;177    	RTC_InitStructure.RTC_SynchPrediv = uwSynchPrediv;
000048  4823              LDR      r0,|L2.216|
00004a  6800              LDR      r0,[r0,#0]  ; uwSynchPrediv
00004c  6088              STR      r0,[r1,#8]  ; RTC_InitStructure
;;;178    	RTC_InitStructure.RTC_HourFormat = RTC_HourFormat_24;
00004e  2000              MOVS     r0,#0
000050  6008              STR      r0,[r1,#0]  ; RTC_InitStructure
;;;179    	RTC_Init(&RTC_InitStructure);
000052  4608              MOV      r0,r1
000054  f7fffffe          BL       RTC_Init
;;;180    
;;;181    	/* 设置年月日和星期 */
;;;182    	RTC_DateStructure.RTC_Year = 0x16;
000058  2016              MOVS     r0,#0x16
00005a  4922              LDR      r1,|L2.228|
00005c  70c8              STRB     r0,[r1,#3]
;;;183    	RTC_DateStructure.RTC_Month = RTC_Month_March ;
00005e  2003              MOVS     r0,#3
000060  7048              STRB     r0,[r1,#1]
;;;184    	RTC_DateStructure.RTC_Date = 0x28;
000062  2028              MOVS     r0,#0x28
000064  7088              STRB     r0,[r1,#2]
;;;185    	RTC_DateStructure.RTC_WeekDay = RTC_Weekday_Saturday;
000066  2006              MOVS     r0,#6
000068  7008              STRB     r0,[r1,#0]
;;;186    	RTC_SetDate(RTC_Format_BCD, &RTC_DateStructure);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       RTC_SetDate
;;;187    
;;;188    	/* 设置时分秒，以及显示格式 */
;;;189    	RTC_TimeStructure.RTC_H12     = RTC_H12_AM;
000070  2000              MOVS     r0,#0
000072  491d              LDR      r1,|L2.232|
000074  70c8              STRB     r0,[r1,#3]
;;;190    	RTC_TimeStructure.RTC_Hours   = 0x05;
000076  2005              MOVS     r0,#5
000078  7008              STRB     r0,[r1,#0]
;;;191    	RTC_TimeStructure.RTC_Minutes = 0x20;
00007a  2020              MOVS     r0,#0x20
00007c  7048              STRB     r0,[r1,#1]
;;;192    	RTC_TimeStructure.RTC_Seconds = 0x00; 
00007e  2000              MOVS     r0,#0
000080  7088              STRB     r0,[r1,#2]
;;;193    	RTC_SetTime(RTC_Format_BCD, &RTC_TimeStructure);   
000082  2001              MOVS     r0,#1
000084  f7fffffe          BL       RTC_SetTime
;;;194    
;;;195    	/* 配置备份寄存器，表示已经设置过RTC */
;;;196    	RTC_WriteBackupRegister(RTC_BKP_DR0, 0x32F2);
000088  f24321f2          MOV      r1,#0x32f2
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       RTC_WriteBackupRegister
;;;197    
;;;198    	/* 设置闹钟 BCD格式，05小时，20分钟，30秒 */
;;;199    	RTC_AlarmStructure.RTC_AlarmTime.RTC_H12     = RTC_H12_AM;
000092  2000              MOVS     r0,#0
000094  4915              LDR      r1,|L2.236|
000096  70c8              STRB     r0,[r1,#3]
;;;200    	RTC_AlarmStructure.RTC_AlarmTime.RTC_Hours   = 0x05;
000098  2005              MOVS     r0,#5
00009a  7008              STRB     r0,[r1,#0]
;;;201    	RTC_AlarmStructure.RTC_AlarmTime.RTC_Minutes = 0x20;
00009c  2020              MOVS     r0,#0x20
00009e  7048              STRB     r0,[r1,#1]
;;;202    	RTC_AlarmStructure.RTC_AlarmTime.RTC_Seconds = 0x30;
0000a0  2030              MOVS     r0,#0x30
0000a2  7088              STRB     r0,[r1,#2]
;;;203    	RTC_AlarmStructure.RTC_AlarmDateWeekDay = 0x31;
0000a4  2031              MOVS     r0,#0x31
0000a6  7308              STRB     r0,[r1,#0xc]
;;;204    	RTC_AlarmStructure.RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
0000a8  2000              MOVS     r0,#0
0000aa  6088              STR      r0,[r1,#8]  ; RTC_AlarmStructure
;;;205    	RTC_AlarmStructure.RTC_AlarmMask = RTC_AlarmMask_DateWeekDay;
0000ac  f04f4000          MOV      r0,#0x80000000
0000b0  6048              STR      r0,[r1,#4]  ; RTC_AlarmStructure
;;;206    
;;;207    	/* 配置 RTC Alarm A 寄存器 */
;;;208    	RTC_SetAlarm(RTC_Format_BCD, RTC_Alarm_A, &RTC_AlarmStructure);
0000b2  460a              MOV      r2,r1
0000b4  0dc1              LSRS     r1,r0,#23
0000b6  2001              MOVS     r0,#1
0000b8  f7fffffe          BL       RTC_SetAlarm
;;;209    
;;;210    	/* 使能 RTC Alarm A 中断 */
;;;211    	RTC_ITConfig(RTC_IT_ALRA, ENABLE);
0000bc  2101              MOVS     r1,#1
0000be  0308              LSLS     r0,r1,#12
0000c0  f7fffffe          BL       RTC_ITConfig
;;;212    
;;;213    	/* 使能闹钟 */
;;;214    	RTC_AlarmCmd(RTC_Alarm_A, ENABLE);
0000c4  2101              MOVS     r1,#1
0000c6  0208              LSLS     r0,r1,#8
0000c8  f7fffffe          BL       RTC_AlarmCmd
;;;215    
;;;216    	/* 清除RTC闹钟标志 */
;;;217    	RTC_ClearFlag(RTC_FLAG_ALRAF);
0000cc  f44f7080          MOV      r0,#0x100
0000d0  f7fffffe          BL       RTC_ClearFlag
;;;218    }
0000d4  bd10              POP      {r4,pc}
;;;219    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L2.216|
                          DCD      uwSynchPrediv
                  |L2.220|
                          DCD      uwAsynchPrediv
                  |L2.224|
                          DCD      RTC_InitStructure
                  |L2.228|
                          DCD      RTC_DateStructure
                  |L2.232|
                          DCD      RTC_TimeStructure
                  |L2.236|
                          DCD      RTC_AlarmStructure

                          AREA ||i.RTC_DateShow||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RTC_DateShow PROC
;;;245    */
;;;246    void RTC_DateShow(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;247    {
;;;248    	/* 得到当前时分秒时间 */
;;;249    	RTC_GetDate(RTC_Format_BIN, &RTC_DateStructure);
000002  4909              LDR      r1,|L3.40|
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       RTC_GetDate
;;;250    	/* 时间显示格式 : hh:mm:ss */
;;;251    	sprintf((char*)aShowTime,"年%0.2d月%0.2d日%0.2d星期%0.1d",RTC_DateStructure.RTC_Year, 
00000a  4807              LDR      r0,|L3.40|
00000c  7800              LDRB     r0,[r0,#0]  ; RTC_DateStructure
00000e  4906              LDR      r1,|L3.40|
000010  7889              LDRB     r1,[r1,#2]  ; RTC_DateStructure
000012  e9cd1000          STRD     r1,r0,[sp,#0]
000016  4804              LDR      r0,|L3.40|
000018  7843              LDRB     r3,[r0,#1]  ; RTC_DateStructure
00001a  78c2              LDRB     r2,[r0,#3]  ; RTC_DateStructure
00001c  a103              ADR      r1,|L3.44|
00001e  480b              LDR      r0,|L3.76|
000020  f7fffffe          BL       __2sprintf
;;;252    	                                                         RTC_DateStructure.RTC_Month, 
;;;253    	                                                          RTC_DateStructure.RTC_Date,
;;;254    											               RTC_DateStructure.RTC_WeekDay);
;;;255    }
000024  bd1c              POP      {r2-r4,pc}
;;;256    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      RTC_DateStructure
                  |L3.44|
00002c  c4ea2530          DCB      196,234,"%0.2d",212,194,"%0.2d",200,213,"%0.2d",208,199,198
000030  2e3264d4
000034  c225302e
000038  3264c8d5
00003c  25302e32
000040  64d0c7c6
000044  da25302e          DCB      218,"%0.1d",0
000048  316400  
00004b  00                DCB      0
                  |L3.76|
                          DCD      aShowTime

                          AREA ||i.RTC_TimeRegulate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RTC_TimeRegulate PROC
;;;283    */
;;;284    void RTC_TimeRegulate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;285    {
;;;286    	uint32_t tmp_hh = 0xFF, tmp_mm = 0xFF, tmp_ss = 0xFF;
000002  26ff              MOVS     r6,#0xff
000004  24ff              MOVS     r4,#0xff
000006  25ff              MOVS     r5,#0xff
;;;287    
;;;288    	printf("\n\r===================时间设置=======================\n\r");
000008  a04f              ADR      r0,|L4.328|
00000a  f7fffffe          BL       __2printf
;;;289    	RTC_TimeStructure.RTC_H12     = RTC_H12_AM;
00000e  2000              MOVS     r0,#0
000010  495b              LDR      r1,|L4.384|
000012  70c8              STRB     r0,[r1,#3]
;;;290    	
;;;291    	/*******************************************************/
;;;292    	
;;;293    	printf("  请设置小时:\n\r");
000014  a05b              ADR      r0,|L4.388|
000016  f7fffffe          BL       __2printf
;;;294    	while (tmp_hh == 0xFF)
00001a  e005              B        |L4.40|
                  |L4.28|
;;;295    	{
;;;296    		tmp_hh = USART_Scanf(23);
00001c  2017              MOVS     r0,#0x17
00001e  f7fffffe          BL       USART_Scanf
000022  4606              MOV      r6,r0
;;;297    		RTC_TimeStructure.RTC_Hours = tmp_hh;
000024  4856              LDR      r0,|L4.384|
000026  7006              STRB     r6,[r0,#0]
                  |L4.40|
000028  2eff              CMP      r6,#0xff              ;294
00002a  d0f7              BEQ      |L4.28|
;;;298    	}
;;;299    	printf("  %0.2d\n\r", tmp_hh);
00002c  4631              MOV      r1,r6
00002e  a059              ADR      r0,|L4.404|
000030  f7fffffe          BL       __2printf
;;;300    	
;;;301        /*******************************************************/
;;;302    	
;;;303    	printf("  请设置分钟:\n\r");
000034  a05a              ADR      r0,|L4.416|
000036  f7fffffe          BL       __2printf
;;;304    	while (tmp_mm == 0xFF)
00003a  e005              B        |L4.72|
                  |L4.60|
;;;305    	{
;;;306    	tmp_mm = USART_Scanf(59);
00003c  203b              MOVS     r0,#0x3b
00003e  f7fffffe          BL       USART_Scanf
000042  4604              MOV      r4,r0
;;;307    	RTC_TimeStructure.RTC_Minutes = tmp_mm;
000044  484e              LDR      r0,|L4.384|
000046  7044              STRB     r4,[r0,#1]
                  |L4.72|
000048  2cff              CMP      r4,#0xff              ;304
00004a  d0f7              BEQ      |L4.60|
;;;308    	}
;;;309    	printf("  %0.2d\n\r", tmp_mm);
00004c  4621              MOV      r1,r4
00004e  a051              ADR      r0,|L4.404|
000050  f7fffffe          BL       __2printf
;;;310    
;;;311    	/*******************************************************/
;;;312    	
;;;313    	printf("  请设置秒:\n\r");
000054  a056              ADR      r0,|L4.432|
000056  f7fffffe          BL       __2printf
;;;314    	while (tmp_ss == 0xFF)
00005a  e005              B        |L4.104|
                  |L4.92|
;;;315    	{
;;;316    	tmp_ss = USART_Scanf(59);
00005c  203b              MOVS     r0,#0x3b
00005e  f7fffffe          BL       USART_Scanf
000062  4605              MOV      r5,r0
;;;317    	RTC_TimeStructure.RTC_Seconds = tmp_ss;
000064  4846              LDR      r0,|L4.384|
000066  7085              STRB     r5,[r0,#2]
                  |L4.104|
000068  2dff              CMP      r5,#0xff              ;314
00006a  d0f7              BEQ      |L4.92|
;;;318    	}
;;;319    	printf("  %0.2d\n\r", tmp_ss);
00006c  4629              MOV      r1,r5
00006e  a049              ADR      r0,|L4.404|
000070  f7fffffe          BL       __2printf
;;;320    	
;;;321    	/*******************************************************/
;;;322    
;;;323    	/* 配置RTC时间寄存器 */
;;;324    	if(RTC_SetTime(RTC_Format_BIN, &RTC_TimeStructure) == ERROR)
000074  4942              LDR      r1,|L4.384|
000076  2000              MOVS     r0,#0
000078  f7fffffe          BL       RTC_SetTime
00007c  b918              CBNZ     r0,|L4.134|
;;;325    	{
;;;326    		printf("\n\r>> !! RTC 时间设置失败 !! <<\n\r");
00007e  a050              ADR      r0,|L4.448|
000080  f7fffffe          BL       __2printf
000084  e009              B        |L4.154|
                  |L4.134|
;;;327    	} 
;;;328    	else
;;;329    	{
;;;330    		printf("\n\r>> !! RTC 时间设置成功 !! <<\n\r");
000086  a057              ADR      r0,|L4.484|
000088  f7fffffe          BL       __2printf
;;;331    		RTC_TimeShow();
00008c  f7fffffe          BL       RTC_TimeShow
;;;332    		/* 设置RTC备份寄存器，以说明已经配置过 */
;;;333    		RTC_WriteBackupRegister(RTC_BKP_DR0, 0x32F2);
000090  f24321f2          MOV      r1,#0x32f2
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       RTC_WriteBackupRegister
                  |L4.154|
;;;334    	}
;;;335    	
;;;336    	/*******************************************************/
;;;337    
;;;338    	tmp_hh = 0xFF;
00009a  26ff              MOVS     r6,#0xff
;;;339    	tmp_mm = 0xFF;
00009c  24ff              MOVS     r4,#0xff
;;;340    	tmp_ss = 0xFF;
00009e  25ff              MOVS     r5,#0xff
;;;341    
;;;342    	/* 禁能 Alarm A */
;;;343    	RTC_AlarmCmd(RTC_Alarm_A, DISABLE);
0000a0  2100              MOVS     r1,#0
0000a2  1c60              ADDS     r0,r4,#1
0000a4  f7fffffe          BL       RTC_AlarmCmd
;;;344    
;;;345    	printf("\n\r==============Alarm A 设置=========================\n\r");
0000a8  a057              ADR      r0,|L4.520|
0000aa  f7fffffe          BL       __2printf
;;;346    	RTC_AlarmStructure.RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
0000ae  2000              MOVS     r0,#0
0000b0  4963              LDR      r1,|L4.576|
0000b2  70c8              STRB     r0,[r1,#3]
;;;347    	
;;;348    	/*******************************************************/
;;;349    	
;;;350    	printf("  请设置闹钟小时:\n\r");
0000b4  a063              ADR      r0,|L4.580|
0000b6  f7fffffe          BL       __2printf
;;;351    	while (tmp_hh == 0xFF)
0000ba  e005              B        |L4.200|
                  |L4.188|
;;;352    	{
;;;353    	tmp_hh = USART_Scanf(23);
0000bc  2017              MOVS     r0,#0x17
0000be  f7fffffe          BL       USART_Scanf
0000c2  4606              MOV      r6,r0
;;;354    	RTC_AlarmStructure.RTC_AlarmTime.RTC_Hours = tmp_hh;
0000c4  485e              LDR      r0,|L4.576|
0000c6  7006              STRB     r6,[r0,#0]
                  |L4.200|
0000c8  2eff              CMP      r6,#0xff              ;351
0000ca  d0f7              BEQ      |L4.188|
;;;355    	}
;;;356    	printf("  %0.2d\n\r", tmp_hh);
0000cc  4631              MOV      r1,r6
0000ce  a031              ADR      r0,|L4.404|
0000d0  f7fffffe          BL       __2printf
;;;357    
;;;358    	/*******************************************************/
;;;359    	
;;;360    	printf("  请设置闹钟分钟:\n\r");
0000d4  a060              ADR      r0,|L4.600|
0000d6  f7fffffe          BL       __2printf
;;;361    	while (tmp_mm == 0xFF)
0000da  e005              B        |L4.232|
                  |L4.220|
;;;362    	{
;;;363    	tmp_mm = USART_Scanf(59);
0000dc  203b              MOVS     r0,#0x3b
0000de  f7fffffe          BL       USART_Scanf
0000e2  4604              MOV      r4,r0
;;;364    	RTC_AlarmStructure.RTC_AlarmTime.RTC_Minutes = tmp_mm;
0000e4  4856              LDR      r0,|L4.576|
0000e6  7044              STRB     r4,[r0,#1]
                  |L4.232|
0000e8  2cff              CMP      r4,#0xff              ;361
0000ea  d0f7              BEQ      |L4.220|
;;;365    	}
;;;366    	printf("  %0.2d\n\r", tmp_mm);
0000ec  4621              MOV      r1,r4
0000ee  a029              ADR      r0,|L4.404|
0000f0  f7fffffe          BL       __2printf
;;;367    	
;;;368    	/*******************************************************/
;;;369    
;;;370    	printf("  请设置闹钟秒:\n\r");
0000f4  a05d              ADR      r0,|L4.620|
0000f6  f7fffffe          BL       __2printf
;;;371    	while (tmp_ss == 0xFF)
0000fa  e005              B        |L4.264|
                  |L4.252|
;;;372    	{
;;;373    	tmp_ss = USART_Scanf(59);
0000fc  203b              MOVS     r0,#0x3b
0000fe  f7fffffe          BL       USART_Scanf
000102  4605              MOV      r5,r0
;;;374    	RTC_AlarmStructure.RTC_AlarmTime.RTC_Seconds = tmp_ss;
000104  484e              LDR      r0,|L4.576|
000106  7085              STRB     r5,[r0,#2]
                  |L4.264|
000108  2dff              CMP      r5,#0xff              ;371
00010a  d0f7              BEQ      |L4.252|
;;;375    	}
;;;376    	printf("  %0.2d", tmp_ss);
00010c  4629              MOV      r1,r5
00010e  a05c              ADR      r0,|L4.640|
000110  f7fffffe          BL       __2printf
;;;377    	
;;;378    	/*******************************************************/
;;;379    	
;;;380    	/* 设置 Alarm A */
;;;381    	RTC_AlarmStructure.RTC_AlarmDateWeekDay = 0x31;
000114  2031              MOVS     r0,#0x31
000116  494a              LDR      r1,|L4.576|
000118  7308              STRB     r0,[r1,#0xc]
;;;382    	RTC_AlarmStructure.RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
00011a  2000              MOVS     r0,#0
00011c  6088              STR      r0,[r1,#8]  ; RTC_AlarmStructure
;;;383    	RTC_AlarmStructure.RTC_AlarmMask = RTC_AlarmMask_DateWeekDay;
00011e  f04f4000          MOV      r0,#0x80000000
000122  6048              STR      r0,[r1,#4]  ; RTC_AlarmStructure
;;;384    
;;;385    	/* 配置 RTC Alarm A 寄存器 */
;;;386    	RTC_SetAlarm(RTC_Format_BIN, RTC_Alarm_A, &RTC_AlarmStructure);
000124  460a              MOV      r2,r1
000126  0dc1              LSRS     r1,r0,#23
000128  2000              MOVS     r0,#0
00012a  f7fffffe          BL       RTC_SetAlarm
;;;387    	printf("\n\r>> !! RTC 设置 Alarm 成功. !! <<\n\r");
00012e  a056              ADR      r0,|L4.648|
000130  f7fffffe          BL       __2printf
;;;388    
;;;389    	/* 使能 RTC Alarm A 中断 */
;;;390    	RTC_ITConfig(RTC_IT_ALRA, ENABLE);
000134  2101              MOVS     r1,#1
000136  0308              LSLS     r0,r1,#12
000138  f7fffffe          BL       RTC_ITConfig
;;;391    
;;;392    	/* 使能 alarm  A */
;;;393    	RTC_AlarmCmd(RTC_Alarm_A, ENABLE);
00013c  2101              MOVS     r1,#1
00013e  0208              LSLS     r0,r1,#8
000140  f7fffffe          BL       RTC_AlarmCmd
;;;394    	
;;;395    }
000144  bd70              POP      {r4-r6,pc}
;;;396    
                          ENDP

000146  0000              DCW      0x0000
                  |L4.328|
000148  0a0d3d3d          DCB      "\n\r===================",202,177,188,228,201,232,214,195
00014c  3d3d3d3d
000150  3d3d3d3d
000154  3d3d3d3d
000158  3d3d3d3d
00015c  3dcab1bc
000160  e4c9e8d6
000164  c3      
000165  3d3d3d3d          DCB      "=======================\n\r",0
000169  3d3d3d3d
00016d  3d3d3d3d
000171  3d3d3d3d
000175  3d3d3d3d
000179  3d3d3d0a
00017d  0d00    
00017f  00                DCB      0
                  |L4.384|
                          DCD      RTC_TimeStructure
                  |L4.388|
000184  2020c7eb          DCB      "  ",199,235,201,232,214,195,208,161,202,177,":\n\r",0
000188  c9e8d6c3
00018c  d0a1cab1
000190  3a0a0d00
                  |L4.404|
000194  20202530          DCB      "  %0.2d\n\r",0
000198  2e32640a
00019c  0d00    
00019e  00                DCB      0
00019f  00                DCB      0
                  |L4.416|
0001a0  2020c7eb          DCB      "  ",199,235,201,232,214,195,183,214,214,211,":\n\r",0
0001a4  c9e8d6c3
0001a8  b7d6d6d3
0001ac  3a0a0d00
                  |L4.432|
0001b0  2020c7eb          DCB      "  ",199,235,201,232,214,195,195,235,":\n\r",0
0001b4  c9e8d6c3
0001b8  c3eb3a0a
0001bc  0d00    
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L4.448|
0001c0  0a0d3e3e          DCB      "\n\r>> !! RTC ",202,177,188,228,201,232,214,195,202,167
0001c4  20212120
0001c8  52544320
0001cc  cab1bce4
0001d0  c9e8d6c3
0001d4  caa7    
0001d6  b0dc2021          DCB      176,220," !! <<\n\r",0
0001da  21203c3c
0001de  0a0d00  
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L4.484|
0001e4  0a0d3e3e          DCB      "\n\r>> !! RTC ",202,177,188,228,201,232,214,195,179,201
0001e8  20212120
0001ec  52544320
0001f0  cab1bce4
0001f4  c9e8d6c3
0001f8  b3c9    
0001fa  b9a62021          DCB      185,166," !! <<\n\r",0
0001fe  21203c3c
000202  0a0d00  
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
                  |L4.520|
000208  0a0d3d3d          DCB      "\n\r==============Alarm A ",201,232,214,195,"=========="
00020c  3d3d3d3d
000210  3d3d3d3d
000214  3d3d3d3d
000218  416c6172
00021c  6d204120
000220  c9e8d6c3
000224  3d3d3d3d
000228  3d3d3d3d
00022c  3d3d    
00022e  3d3d3d3d          DCB      "===============\n\r",0
000232  3d3d3d3d
000236  3d3d3d3d
00023a  3d3d3d0a
00023e  0d00    
                  |L4.576|
                          DCD      RTC_AlarmStructure
                  |L4.580|
000244  2020c7eb          DCB      "  ",199,235,201,232,214,195,196,214,214,211,208,161,202
000248  c9e8d6c3
00024c  c4d6d6d3
000250  d0a1ca  
000253  b13a0a0d          DCB      177,":\n\r",0
000257  00      
                  |L4.600|
000258  2020c7eb          DCB      "  ",199,235,201,232,214,195,196,214,214,211,183,214,214
00025c  c9e8d6c3
000260  c4d6d6d3
000264  b7d6d6  
000267  d33a0a0d          DCB      211,":\n\r",0
00026b  00      
                  |L4.620|
00026c  2020c7eb          DCB      "  ",199,235,201,232,214,195,196,214,214,211,195,235,":\n"
000270  c9e8d6c3
000274  c4d6d6d3
000278  c3eb3a0a
00027c  0d00              DCB      "\r",0
00027e  00                DCB      0
00027f  00                DCB      0
                  |L4.640|
000280  20202530          DCB      "  %0.2d",0
000284  2e326400
                  |L4.648|
000288  0a0d3e3e          DCB      "\n\r>> !! RTC ",201,232,214,195," Alarm ",179,201,185,166
00028c  20212120
000290  52544320
000294  c9e8d6c3
000298  20416c61
00029c  726d20b3
0002a0  c9b9a6  
0002a3  2e202121          DCB      ". !! <<\n\r",0
0002a7  203c3c0a
0002ab  0d00    
0002ad  00                DCB      0
0002ae  00                DCB      0
0002af  00                DCB      0

                          AREA ||i.RTC_TimeShow||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RTC_TimeShow PROC
;;;227    */
;;;228    void RTC_TimeShow(void)
000000  b508              PUSH     {r3,lr}
;;;229    {
;;;230    	/* 得到当前时分秒时间 */
;;;231    	RTC_GetTime(RTC_Format_BIN, &RTC_TimeStructure);
000002  4907              LDR      r1,|L5.32|
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       RTC_GetTime
;;;232    	/* 时间显示格式 : hh:mm:ss */
;;;233    	sprintf((char*)aShowTime,"%0.2d:%0.2d:%0.2d",RTC_TimeStructure.RTC_Hours, 
00000a  4805              LDR      r0,|L5.32|
00000c  7880              LDRB     r0,[r0,#2]  ; RTC_TimeStructure
00000e  9000              STR      r0,[sp,#0]
000010  4803              LDR      r0,|L5.32|
000012  7843              LDRB     r3,[r0,#1]  ; RTC_TimeStructure
000014  7802              LDRB     r2,[r0,#0]  ; RTC_TimeStructure
000016  a103              ADR      r1,|L5.36|
000018  4807              LDR      r0,|L5.56|
00001a  f7fffffe          BL       __2sprintf
;;;234    	                                           RTC_TimeStructure.RTC_Minutes, 
;;;235    	                                           RTC_TimeStructure.RTC_Seconds);
;;;236    }
00001e  bd08              POP      {r3,pc}
;;;237    
                          ENDP

                  |L5.32|
                          DCD      RTC_TimeStructure
                  |L5.36|
000024  25302e32          DCB      "%0.2d:%0.2d:%0.2d",0
000028  643a2530
00002c  2e32643a
000030  25302e32
000034  6400    
000036  00                DCB      0
000037  00                DCB      0
                  |L5.56|
                          DCD      aShowTime

                          AREA ||i.USART_Scanf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USART_Scanf PROC
;;;404    */
;;;405    uint8_t USART_Scanf(uint32_t value)
000000  b57c              PUSH     {r2-r6,lr}
;;;406    {
000002  4605              MOV      r5,r0
;;;407    	uint32_t index = 0;
000004  2400              MOVS     r4,#0
;;;408    	uint32_t tmp[2] = {0, 0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;409    
;;;410    	while (index < 2)
00000c  e01b              B        |L6.70|
                  |L6.14|
;;;411    	{
;;;412    		/* 等待直到 RXNE = 1 */
;;;413    		while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
00000e  bf00              NOP      
                  |L6.16|
000010  2120              MOVS     r1,#0x20
000012  4817              LDR      r0,|L6.112|
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L6.16|
;;;414    		{}
;;;415    		tmp[index++] = (USART_ReceiveData(USART1));
00001c  4814              LDR      r0,|L6.112|
00001e  f7fffffe          BL       USART_ReceiveData
000022  4621              MOV      r1,r4
000024  1c64              ADDS     r4,r4,#1
000026  f84d0021          STR      r0,[sp,r1,LSL #2]
;;;416    		if ((tmp[index - 1] < 0x30) || (tmp[index - 1] > 0x39))
00002a  1e60              SUBS     r0,r4,#1
00002c  f85d0020          LDR      r0,[sp,r0,LSL #2]
000030  2830              CMP      r0,#0x30
000032  d304              BCC      |L6.62|
000034  1e60              SUBS     r0,r4,#1
000036  f85d0020          LDR      r0,[sp,r0,LSL #2]
00003a  2839              CMP      r0,#0x39
00003c  d903              BLS      |L6.70|
                  |L6.62|
;;;417    		{
;;;418    			printf("\n\r 有效数据必须在 0 和 9 直接\n\r");
00003e  a00d              ADR      r0,|L6.116|
000040  f7fffffe          BL       __2printf
;;;419    			index--;
000044  1e64              SUBS     r4,r4,#1
                  |L6.70|
000046  2c02              CMP      r4,#2                 ;410
000048  d3e1              BCC      |L6.14|
;;;420    		}
;;;421    	}
;;;422    	
;;;423    	/* 计算两个字节合并后的数值 */
;;;424    	index = (tmp[1] - 0x30) + ((tmp[0] - 0x30) * 10);
00004a  9801              LDR      r0,[sp,#4]
00004c  3830              SUBS     r0,r0,#0x30
00004e  9900              LDR      r1,[sp,#0]
000050  3930              SUBS     r1,r1,#0x30
000052  eb010181          ADD      r1,r1,r1,LSL #2
000056  eb000441          ADD      r4,r0,r1,LSL #1
;;;425    	/* Checks */
;;;426    	if (index > value)
00005a  42ac              CMP      r4,r5
00005c  d905              BLS      |L6.106|
;;;427    	{
;;;428    		printf("\n\r 有效数据必须在 0 和 %d 直接\n\r", value);
00005e  4629              MOV      r1,r5
000060  a00c              ADR      r0,|L6.148|
000062  f7fffffe          BL       __2printf
;;;429    		return 0xFF;
000066  20ff              MOVS     r0,#0xff
                  |L6.104|
;;;430    	}
;;;431    	
;;;432    	return index;
;;;433    }
000068  bd7c              POP      {r2-r6,pc}
                  |L6.106|
00006a  b2e0              UXTB     r0,r4                 ;432
00006c  e7fc              B        |L6.104|
;;;434    
                          ENDP

00006e  0000              DCW      0x0000
                  |L6.112|
                          DCD      0x40011000
                  |L6.116|
000074  0a0d20d3          DCB      "\n\r ",211,208,208,167,202,253,190,221,177,216,208,235,212
000078  d0d0a7ca
00007c  fdbeddb1
000080  d8d0ebd4
000084  da203020          DCB      218," 0 ",186,205," 9 ",214,177,189,211,"\n\r",0
000088  bacd2039
00008c  20d6b1bd
000090  d30a0d00
                  |L6.148|
000094  0a0d20d3          DCB      "\n\r ",211,208,208,167,202,253,190,221,177,216,208,235,212
000098  d0d0a7ca
00009c  fdbeddb1
0000a0  d8d0ebd4
0000a4  da203020          DCB      218," 0 ",186,205," %d ",214,177,189,211,"\n\r",0
0000a8  bacd2025
0000ac  6420d6b1
0000b0  bdd30a0d
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.bsp_InitRTC||, CODE, READONLY, ALIGN=2

                  bsp_InitRTC PROC
;;;40     */ 
;;;41     void bsp_InitRTC(void) 
000000  b50e              PUSH     {r1-r3,lr}
;;;42     { 
;;;43     	NVIC_InitTypeDef NVIC_InitStructure; 
;;;44     	EXTI_InitTypeDef EXTI_InitStructure; 
;;;45     	/* 用于检测是否已经配置过RTC，如果配置过的话，会在配置结束时 
;;;46     	设置RTC备份寄存器为0x32F2。如果检测RTC备份寄存器不是0x32F2   那么表示没有配置过，需要配置RTC.   */ 
;;;47     	if (RTC_ReadBackupRegister(RTC_BKP_DR0) != 0x32F2) 
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       RTC_ReadBackupRegister
000008  f5a05148          SUB      r1,r0,#0x3200
00000c  39f2              SUBS     r1,r1,#0xf2
00000e  d00d              BEQ      |L7.44|
;;;48     	{ 
;;;49     		/* RTC 配置 */ 
;;;50     		RTC_Config(); 
000010  f7fffffe          BL       RTC_Config
;;;51     		/* 打印调试信息 */ 
;;;52     		#ifdef RTC_Debug 
;;;53     		printf("第一次使用RTC \n\r"); 
000014  a028              ADR      r0,|L7.184|
000016  f7fffffe          BL       __2printf
;;;54     		#endif  
;;;55     		/* 检测上电复位标志是否设置 */ 
;;;56     		if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET) 
00001a  207b              MOVS     r0,#0x7b
00001c  f7fffffe          BL       RCC_GetFlagStatus
000020  2800              CMP      r0,#0
000022  d026              BEQ      |L7.114|
;;;57     		{ 
;;;58     		/* 发生上电复位 */ 
;;;59     		#ifdef RTC_Debug 
;;;60     		printf("发生上电复位 \n\r"); 
000024  a029              ADR      r0,|L7.204|
000026  f7fffffe          BL       __2printf
00002a  e022              B        |L7.114|
                  |L7.44|
;;;61     		#endif 
;;;62     		} 
;;;63     	} 
;;;64     	else 
;;;65     	{ 
;;;66     		/* 打印调试信息 */ 
;;;67     		#ifdef RTC_Debug 
;;;68     			printf("第n次使用RTC \n\r"); 
00002c  a02b              ADR      r0,|L7.220|
00002e  f7fffffe          BL       __2printf
;;;69     		#endif 
;;;70     		/* 检测上电复位标志是否设置 */ 
;;;71     		if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET) 
000032  207b              MOVS     r0,#0x7b
000034  f7fffffe          BL       RCC_GetFlagStatus
000038  b118              CBZ      r0,|L7.66|
;;;72     		{ 
;;;73     			/* 发生上电复位 */ 
;;;74     			#ifdef RTC_Debug 
;;;75     				printf("发生上电复位 \n\r"); 
00003a  a024              ADR      r0,|L7.204|
00003c  f7fffffe          BL       __2printf
000040  e006              B        |L7.80|
                  |L7.66|
;;;76     			#endif 
;;;77     		} 
;;;78     		/* 检测引脚复位标志是否设置 */ 
;;;79     		else if (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET) 
000042  207a              MOVS     r0,#0x7a
000044  f7fffffe          BL       RCC_GetFlagStatus
000048  b110              CBZ      r0,|L7.80|
;;;80     		{ 
;;;81     			/* 发生引脚复位 */ 
;;;82     			#ifdef RTC_Debug 
;;;83     				printf("发生引脚复位 \n\r");     
00004a  a028              ADR      r0,|L7.236|
00004c  f7fffffe          BL       __2printf
                  |L7.80|
;;;84     			#endif    
;;;85     		} 
;;;86     		
;;;87     		/* 使能PWR时钟 */ 
;;;88     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); 
000050  2101              MOVS     r1,#1
000052  0708              LSLS     r0,r1,#28
000054  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;89     		/* 允许访问RTC */ 
;;;90     		PWR_BackupAccessCmd(ENABLE); 
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       PWR_BackupAccessCmd
;;;91     		/* 等待 RTC APB 寄存器同步 */ 
;;;92     		RTC_WaitForSynchro(); 
00005e  f7fffffe          BL       RTC_WaitForSynchro
;;;93     		/* 清除RTC闹钟标志 */ 
;;;94     		RTC_ClearFlag(RTC_FLAG_ALRAF); 
000062  f44f7080          MOV      r0,#0x100
000066  f7fffffe          BL       RTC_ClearFlag
;;;95     		/* 清除RTC闹钟中断挂起标志 */ 
;;;96     		EXTI_ClearITPendingBit(EXTI_Line17); 
00006a  f44f3000          MOV      r0,#0x20000
00006e  f7fffffe          BL       EXTI_ClearITPendingBit
                  |L7.114|
;;;97     	} 
;;;98     	
;;;99     	/* RTC闹钟中断配置 */ 
;;;100    	/* EXTI 配置 */ 
;;;101    	EXTI_ClearITPendingBit(EXTI_Line17); 
000072  f44f3000          MOV      r0,#0x20000
000076  f7fffffe          BL       EXTI_ClearITPendingBit
;;;102    	EXTI_InitStructure.EXTI_Line = EXTI_Line17; 
00007a  f44f3000          MOV      r0,#0x20000
00007e  9000              STR      r0,[sp,#0]
;;;103    	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; 
000080  2000              MOVS     r0,#0
000082  f88d0004          STRB     r0,[sp,#4]
;;;104    	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising; 
000086  2008              MOVS     r0,#8
000088  f88d0005          STRB     r0,[sp,#5]
;;;105    	EXTI_InitStructure.EXTI_LineCmd = ENABLE; 
00008c  2001              MOVS     r0,#1
00008e  f88d0006          STRB     r0,[sp,#6]
;;;106    	EXTI_Init(&EXTI_InitStructure); 
000092  4668              MOV      r0,sp
000094  f7fffffe          BL       EXTI_Init
;;;107    	/* 使能RTC闹钟中断 */ 
;;;108    	NVIC_InitStructure.NVIC_IRQChannel = RTC_Alarm_IRQn; 
000098  2029              MOVS     r0,#0x29
00009a  f88d0008          STRB     r0,[sp,#8]
;;;109    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; 
00009e  2000              MOVS     r0,#0
0000a0  f88d0009          STRB     r0,[sp,#9]
;;;110    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; 
0000a4  f88d000a          STRB     r0,[sp,#0xa]
;;;111    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
0000a8  2001              MOVS     r0,#1
0000aa  f88d000b          STRB     r0,[sp,#0xb]
;;;112    	NVIC_Init(&NVIC_InitStructure); 
0000ae  a802              ADD      r0,sp,#8
0000b0  f7fffffe          BL       NVIC_Init
;;;113    }	  
0000b4  bd0e              POP      {r1-r3,pc}
;;;114    /*
                          ENDP

0000b6  0000              DCW      0x0000
                  |L7.184|
0000b8  b5dad2bb          DCB      181,218,210,187,180,206,202,185,211,195,"RTC \n\r",0
0000bc  b4cecab9
0000c0  d3c35254
0000c4  43200a0d
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L7.204|
0000cc  b7a2c9fa          DCB      183,162,201,250,201,207,181,231,184,180,206,187," \n\r",0
0000d0  c9cfb5e7
0000d4  b8b4cebb
0000d8  200a0d00
                  |L7.220|
0000dc  b5da6eb4          DCB      181,218,"n",180,206,202,185,211,195,"RTC \n\r",0
0000e0  cecab9d3
0000e4  c3525443
0000e8  200a0d00
                  |L7.236|
0000ec  b7a2c9fa          DCB      183,162,201,250,210,253,189,197,184,180,206,187," \n\r",0
0000f0  d2fdbdc5
0000f4  b8b4cebb
0000f8  200a0d00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  aShowTime
                          %        52
                  RTC_InitStructure
                          %        12
                  RTC_AlarmStructure
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  uwAsynchPrediv
                          DCD      0x00000000
                  uwSynchPrediv
                          DCD      0x00000000
                  RTC_TimeStructure
                          DCD      0x00000000
                  RTC_DateStructure
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_rtc.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_rtc_c_0dd59b92____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_rtc_c_0dd59b92____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_rtc_c_0dd59b92____REVSH|
#line 144
|__asm___9_bsp_rtc_c_0dd59b92____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
